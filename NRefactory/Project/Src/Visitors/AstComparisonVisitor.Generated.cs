//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgentRalph.Visitors {
	using System;
	using System.Collections.Generic;
	using System.Diagnostics;
	using ICSharpCode.NRefactory.Ast;
	using ICSharpCode.NRefactory;
	
	
	public partial class AstComparisonVisitor {
		
		public virtual bool VisitAddHandlerStatement(AddHandlerStatement addHandlerStatement, object d) {
			if ((addHandlerStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((addHandlerStatement.EventExpression == null)) {
				return SetFailure();
			}
			if ((addHandlerStatement.HandlerExpression == null)) {
				return SetFailure();
			}
			if(addHandlerStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (AddHandlerStatement)d;
			if (!IsMatch(addHandlerStatement, data)) {
				return SetFailure();
			}
			addHandlerStatement.EventExpression.AcceptVisitor(this, data.EventExpression);
			return addHandlerStatement.HandlerExpression.AcceptVisitor(this, data.HandlerExpression);
		}
		
		public virtual bool VisitAddressOfExpression(AddressOfExpression addressOfExpression, object d) {
			if ((addressOfExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((addressOfExpression.Expression == null)) {
				return SetFailure();
			}
			if(addressOfExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (AddressOfExpression)d;
			if (!IsMatch(addressOfExpression, data)) {
				return SetFailure();
			}
			return addressOfExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitAnonymousMethodExpression(AnonymousMethodExpression anonymousMethodExpression, object d) {
			if ((anonymousMethodExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((anonymousMethodExpression.Parameters == null)) {
				return SetFailure();
			}
			if ((anonymousMethodExpression.Body == null)) {
				return SetFailure();
			}
			if(anonymousMethodExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (AnonymousMethodExpression)d;
			if (!IsMatch(anonymousMethodExpression, data)) {
				return SetFailure();
			}
			if (anonymousMethodExpression.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<anonymousMethodExpression.Parameters.Count;i++) {
				ParameterDeclarationExpression o = anonymousMethodExpression.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return anonymousMethodExpression.Body.AcceptVisitor(this, data.Body);
		}
		
		public virtual bool VisitArrayCreateExpression(ArrayCreateExpression arrayCreateExpression, object d) {
			if ((arrayCreateExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((arrayCreateExpression.CreateType == null)) {
				return SetFailure();
			}
			if ((arrayCreateExpression.Arguments == null)) {
				return SetFailure();
			}
			if ((arrayCreateExpression.ArrayInitializer == null)) {
				return SetFailure();
			}
			if(arrayCreateExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (ArrayCreateExpression)d;
			if (!IsMatch(arrayCreateExpression, data)) {
				return SetFailure();
			}
			arrayCreateExpression.CreateType.AcceptVisitor(this, data.CreateType);
			if (arrayCreateExpression.Arguments.Count == data.Arguments.Count) {
			for (int i=0; i<arrayCreateExpression.Arguments.Count;i++) {
				Expression o = arrayCreateExpression.Arguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Arguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return arrayCreateExpression.ArrayInitializer.AcceptVisitor(this, data.ArrayInitializer);
		}
		
		public virtual bool VisitAssignmentExpression(AssignmentExpression assignmentExpression, object d) {
			if ((assignmentExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((assignmentExpression.Left == null)) {
				return SetFailure();
			}
			if ((assignmentExpression.Right == null)) {
				return SetFailure();
			}
			if(assignmentExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (AssignmentExpression)d;
			if (!IsMatch(assignmentExpression, data)) {
				return SetFailure();
			}
			assignmentExpression.Left.AcceptVisitor(this, data.Left);
			return assignmentExpression.Right.AcceptVisitor(this, data.Right);
		}
		
		public virtual bool VisitAttribute(ICSharpCode.NRefactory.Ast.Attribute attribute, object d) {
			if ((attribute == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((attribute.PositionalArguments == null)) {
				return SetFailure();
			}
			if ((attribute.NamedArguments == null)) {
				return SetFailure();
			}
			if(attribute.GetType() != d.GetType()) {return SetFailure();}
			var data = (ICSharpCode.NRefactory.Ast.Attribute)d;
			if (!IsMatch(attribute, data)) {
				return SetFailure();
			}
			if (attribute.PositionalArguments.Count == data.PositionalArguments.Count) {
			for (int i=0; i<attribute.PositionalArguments.Count;i++) {
				Expression o = attribute.PositionalArguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.PositionalArguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (attribute.NamedArguments.Count == data.NamedArguments.Count) {
			for (int i=0; i<attribute.NamedArguments.Count;i++) {
				NamedArgumentExpression o = attribute.NamedArguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.NamedArguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitAttributeSection(AttributeSection attributeSection, object d) {
			if ((attributeSection == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((attributeSection.Attributes == null)) {
				return SetFailure();
			}
			if(attributeSection.GetType() != d.GetType()) {return SetFailure();}
			var data = (AttributeSection)d;
			if (!IsMatch(attributeSection, data)) {
				return SetFailure();
			}
			if (attributeSection.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<attributeSection.Attributes.Count;i++) {
				ICSharpCode.NRefactory.Ast.Attribute o = attributeSection.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitBaseReferenceExpression(BaseReferenceExpression baseReferenceExpression, object d) {
			if ((baseReferenceExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(baseReferenceExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (BaseReferenceExpression)d;
			if (!IsMatch(baseReferenceExpression, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitBinaryOperatorExpression(BinaryOperatorExpression binaryOperatorExpression, object d) {
			if ((binaryOperatorExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((binaryOperatorExpression.Left == null)) {
				return SetFailure();
			}
			if ((binaryOperatorExpression.Right == null)) {
				return SetFailure();
			}
			if(binaryOperatorExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (BinaryOperatorExpression)d;
			if (!IsMatch(binaryOperatorExpression, data)) {
				return SetFailure();
			}
			binaryOperatorExpression.Left.AcceptVisitor(this, data.Left);
			return binaryOperatorExpression.Right.AcceptVisitor(this, data.Right);
		}
		
		public virtual bool VisitBlockStatement(BlockStatement blockStatement, object d) {
			if ((blockStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(blockStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (BlockStatement)d;
			if (!IsMatch(blockStatement, data)) {
				return SetFailure();
			}
			return blockStatement.AcceptChildren(this, d);
		}
		
		public virtual bool VisitBreakStatement(BreakStatement breakStatement, object d) {
			if ((breakStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(breakStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (BreakStatement)d;
			if (!IsMatch(breakStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitCaseLabel(CaseLabel caseLabel, object d) {
			if ((caseLabel == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((caseLabel.Label == null)) {
				return SetFailure();
			}
			if ((caseLabel.ToExpression == null)) {
				return SetFailure();
			}
			if(caseLabel.GetType() != d.GetType()) {return SetFailure();}
			var data = (CaseLabel)d;
			if (!IsMatch(caseLabel, data)) {
				return SetFailure();
			}
			caseLabel.Label.AcceptVisitor(this, data.Label);
			return caseLabel.ToExpression.AcceptVisitor(this, data.ToExpression);
		}
		
		public virtual bool VisitCastExpression(CastExpression castExpression, object d) {
			if ((castExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((castExpression.CastTo == null)) {
				return SetFailure();
			}
			if ((castExpression.Expression == null)) {
				return SetFailure();
			}
			if(castExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (CastExpression)d;
			if (!IsMatch(castExpression, data)) {
				return SetFailure();
			}
			castExpression.CastTo.AcceptVisitor(this, data.CastTo);
			return castExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitCatchClause(CatchClause catchClause, object d) {
			if ((catchClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((catchClause.TypeReference == null)) {
				return SetFailure();
			}
			if ((catchClause.StatementBlock == null)) {
				return SetFailure();
			}
			if ((catchClause.Condition == null)) {
				return SetFailure();
			}
			if(catchClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (CatchClause)d;
			if (!IsMatch(catchClause, data)) {
				return SetFailure();
			}
			catchClause.TypeReference.AcceptVisitor(this, data.TypeReference);
			catchClause.StatementBlock.AcceptVisitor(this, data.StatementBlock);
			return catchClause.Condition.AcceptVisitor(this, data.Condition);
		}
		
		public virtual bool VisitCheckedExpression(CheckedExpression checkedExpression, object d) {
			if ((checkedExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((checkedExpression.Expression == null)) {
				return SetFailure();
			}
			if(checkedExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (CheckedExpression)d;
			if (!IsMatch(checkedExpression, data)) {
				return SetFailure();
			}
			return checkedExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitCheckedStatement(CheckedStatement checkedStatement, object d) {
			if ((checkedStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((checkedStatement.Block == null)) {
				return SetFailure();
			}
			if(checkedStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (CheckedStatement)d;
			if (!IsMatch(checkedStatement, data)) {
				return SetFailure();
			}
			return checkedStatement.Block.AcceptVisitor(this, data.Block);
		}
		
		public virtual bool VisitClassReferenceExpression(ClassReferenceExpression classReferenceExpression, object d) {
			if ((classReferenceExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(classReferenceExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (ClassReferenceExpression)d;
			if (!IsMatch(classReferenceExpression, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitCollectionInitializerExpression(CollectionInitializerExpression collectionInitializerExpression, object d) {
			if ((collectionInitializerExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((collectionInitializerExpression.CreateExpressions == null)) {
				return SetFailure();
			}
			if(collectionInitializerExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (CollectionInitializerExpression)d;
			if (!IsMatch(collectionInitializerExpression, data)) {
				return SetFailure();
			}
			if (collectionInitializerExpression.CreateExpressions.Count == data.CreateExpressions.Count) {
			for (int i=0; i<collectionInitializerExpression.CreateExpressions.Count;i++) {
				Expression o = collectionInitializerExpression.CreateExpressions[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.CreateExpressions[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitCompilationUnit(CompilationUnit compilationUnit, object d) {
			if ((compilationUnit == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(compilationUnit.GetType() != d.GetType()) {return SetFailure();}
			var data = (CompilationUnit)d;
			if (!IsMatch(compilationUnit, data)) {
				return SetFailure();
			}
			return compilationUnit.AcceptChildren(this, d);
		}
		
		public virtual bool VisitConditionalExpression(ConditionalExpression conditionalExpression, object d) {
			if ((conditionalExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((conditionalExpression.Condition == null)) {
				return SetFailure();
			}
			if ((conditionalExpression.TrueExpression == null)) {
				return SetFailure();
			}
			if ((conditionalExpression.FalseExpression == null)) {
				return SetFailure();
			}
			if(conditionalExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (ConditionalExpression)d;
			if (!IsMatch(conditionalExpression, data)) {
				return SetFailure();
			}
			conditionalExpression.Condition.AcceptVisitor(this, data.Condition);
			conditionalExpression.TrueExpression.AcceptVisitor(this, data.TrueExpression);
			return conditionalExpression.FalseExpression.AcceptVisitor(this, data.FalseExpression);
		}
		
		public virtual bool VisitConstructorDeclaration(ConstructorDeclaration constructorDeclaration, object d) {
			if ((constructorDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((constructorDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((constructorDeclaration.Parameters == null)) {
				return SetFailure();
			}
			if ((constructorDeclaration.ConstructorInitializer == null)) {
				return SetFailure();
			}
			if ((constructorDeclaration.Body == null)) {
				return SetFailure();
			}
			if(constructorDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (ConstructorDeclaration)d;
			if (!IsMatch(constructorDeclaration, data)) {
				return SetFailure();
			}
			if (constructorDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<constructorDeclaration.Attributes.Count;i++) {
				AttributeSection o = constructorDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (constructorDeclaration.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<constructorDeclaration.Parameters.Count;i++) {
				ParameterDeclarationExpression o = constructorDeclaration.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			constructorDeclaration.ConstructorInitializer.AcceptVisitor(this, data.ConstructorInitializer);
			return constructorDeclaration.Body.AcceptVisitor(this, data.Body);
		}
		
		public virtual bool VisitConstructorInitializer(ConstructorInitializer constructorInitializer, object d) {
			if ((constructorInitializer == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((constructorInitializer.Arguments == null)) {
				return SetFailure();
			}
			if(constructorInitializer.GetType() != d.GetType()) {return SetFailure();}
			var data = (ConstructorInitializer)d;
			if (!IsMatch(constructorInitializer, data)) {
				return SetFailure();
			}
			if (constructorInitializer.Arguments.Count == data.Arguments.Count) {
			for (int i=0; i<constructorInitializer.Arguments.Count;i++) {
				Expression o = constructorInitializer.Arguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Arguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitContinueStatement(ContinueStatement continueStatement, object d) {
			if ((continueStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(continueStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ContinueStatement)d;
			if (!IsMatch(continueStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitDeclareDeclaration(DeclareDeclaration declareDeclaration, object d) {
			if ((declareDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((declareDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((declareDeclaration.Parameters == null)) {
				return SetFailure();
			}
			if ((declareDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if(declareDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (DeclareDeclaration)d;
			if (!IsMatch(declareDeclaration, data)) {
				return SetFailure();
			}
			if (declareDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<declareDeclaration.Attributes.Count;i++) {
				AttributeSection o = declareDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (declareDeclaration.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<declareDeclaration.Parameters.Count;i++) {
				ParameterDeclarationExpression o = declareDeclaration.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return declareDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitDefaultValueExpression(DefaultValueExpression defaultValueExpression, object d) {
			if ((defaultValueExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((defaultValueExpression.TypeReference == null)) {
				return SetFailure();
			}
			if(defaultValueExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (DefaultValueExpression)d;
			if (!IsMatch(defaultValueExpression, data)) {
				return SetFailure();
			}
			return defaultValueExpression.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitDelegateDeclaration(DelegateDeclaration delegateDeclaration, object d) {
			if ((delegateDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((delegateDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((delegateDeclaration.ReturnType == null)) {
				return SetFailure();
			}
			if ((delegateDeclaration.Parameters == null)) {
				return SetFailure();
			}
			if ((delegateDeclaration.Templates == null)) {
				return SetFailure();
			}
			if(delegateDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (DelegateDeclaration)d;
			if (!IsMatch(delegateDeclaration, data)) {
				return SetFailure();
			}
			if (delegateDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<delegateDeclaration.Attributes.Count;i++) {
				AttributeSection o = delegateDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			delegateDeclaration.ReturnType.AcceptVisitor(this, data.ReturnType);
			if (delegateDeclaration.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<delegateDeclaration.Parameters.Count;i++) {
				ParameterDeclarationExpression o = delegateDeclaration.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (delegateDeclaration.Templates.Count == data.Templates.Count) {
			for (int i=0; i<delegateDeclaration.Templates.Count;i++) {
				TemplateDefinition o = delegateDeclaration.Templates[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Templates[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitDestructorDeclaration(DestructorDeclaration destructorDeclaration, object d) {
			if ((destructorDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((destructorDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((destructorDeclaration.Body == null)) {
				return SetFailure();
			}
			if(destructorDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (DestructorDeclaration)d;
			if (!IsMatch(destructorDeclaration, data)) {
				return SetFailure();
			}
			if (destructorDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<destructorDeclaration.Attributes.Count;i++) {
				AttributeSection o = destructorDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return destructorDeclaration.Body.AcceptVisitor(this, data.Body);
		}
		
		public virtual bool VisitDirectionExpression(DirectionExpression directionExpression, object d) {
			if ((directionExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((directionExpression.Expression == null)) {
				return SetFailure();
			}
			if(directionExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (DirectionExpression)d;
			if (!IsMatch(directionExpression, data)) {
				return SetFailure();
			}
			return directionExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitDoLoopStatement(DoLoopStatement doLoopStatement, object d) {
			if ((doLoopStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((doLoopStatement.Condition == null)) {
				return SetFailure();
			}
			if ((doLoopStatement.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(doLoopStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (DoLoopStatement)d;
			if (!IsMatch(doLoopStatement, data)) {
				return SetFailure();
			}
			doLoopStatement.Condition.AcceptVisitor(this, data.Condition);
			return doLoopStatement.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitElseIfSection(ElseIfSection elseIfSection, object d) {
			if ((elseIfSection == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((elseIfSection.Condition == null)) {
				return SetFailure();
			}
			if ((elseIfSection.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(elseIfSection.GetType() != d.GetType()) {return SetFailure();}
			var data = (ElseIfSection)d;
			if (!IsMatch(elseIfSection, data)) {
				return SetFailure();
			}
			elseIfSection.Condition.AcceptVisitor(this, data.Condition);
			return elseIfSection.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitEmptyStatement(EmptyStatement emptyStatement, object d) {
			if ((emptyStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(emptyStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (EmptyStatement)d;
			if (!IsMatch(emptyStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitEndStatement(EndStatement endStatement, object d) {
			if ((endStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(endStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (EndStatement)d;
			if (!IsMatch(endStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitEraseStatement(EraseStatement eraseStatement, object d) {
			if ((eraseStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((eraseStatement.Expressions == null)) {
				return SetFailure();
			}
			if(eraseStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (EraseStatement)d;
			if (!IsMatch(eraseStatement, data)) {
				return SetFailure();
			}
			if (eraseStatement.Expressions.Count == data.Expressions.Count) {
			for (int i=0; i<eraseStatement.Expressions.Count;i++) {
				Expression o = eraseStatement.Expressions[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Expressions[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitErrorStatement(ErrorStatement errorStatement, object d) {
			if ((errorStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((errorStatement.Expression == null)) {
				return SetFailure();
			}
			if(errorStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ErrorStatement)d;
			if (!IsMatch(errorStatement, data)) {
				return SetFailure();
			}
			return errorStatement.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitEventAddRegion(EventAddRegion eventAddRegion, object d) {
			if ((eventAddRegion == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((eventAddRegion.Attributes == null)) {
				return SetFailure();
			}
			if ((eventAddRegion.Block == null)) {
				return SetFailure();
			}
			if ((eventAddRegion.Parameters == null)) {
				return SetFailure();
			}
			if(eventAddRegion.GetType() != d.GetType()) {return SetFailure();}
			var data = (EventAddRegion)d;
			if (!IsMatch(eventAddRegion, data)) {
				return SetFailure();
			}
			if (eventAddRegion.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<eventAddRegion.Attributes.Count;i++) {
				AttributeSection o = eventAddRegion.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			eventAddRegion.Block.AcceptVisitor(this, data.Block);
			if (eventAddRegion.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<eventAddRegion.Parameters.Count;i++) {
				ParameterDeclarationExpression o = eventAddRegion.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitEventDeclaration(EventDeclaration eventDeclaration, object d) {
			if ((eventDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((eventDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((eventDeclaration.Parameters == null)) {
				return SetFailure();
			}
			if ((eventDeclaration.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((eventDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if ((eventDeclaration.AddRegion == null)) {
				return SetFailure();
			}
			if ((eventDeclaration.RemoveRegion == null)) {
				return SetFailure();
			}
			if ((eventDeclaration.RaiseRegion == null)) {
				return SetFailure();
			}
			if ((eventDeclaration.Initializer == null)) {
				return SetFailure();
			}
			if(eventDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (EventDeclaration)d;
			if (!IsMatch(eventDeclaration, data)) {
				return SetFailure();
			}
			if (eventDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<eventDeclaration.Attributes.Count;i++) {
				AttributeSection o = eventDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (eventDeclaration.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<eventDeclaration.Parameters.Count;i++) {
				ParameterDeclarationExpression o = eventDeclaration.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (eventDeclaration.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<eventDeclaration.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = eventDeclaration.InterfaceImplementations[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			eventDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
			eventDeclaration.AddRegion.AcceptVisitor(this, data.AddRegion);
			eventDeclaration.RemoveRegion.AcceptVisitor(this, data.RemoveRegion);
			eventDeclaration.RaiseRegion.AcceptVisitor(this, data.RaiseRegion);
			return eventDeclaration.Initializer.AcceptVisitor(this, data.Initializer);
		}
		
		public virtual bool VisitEventRaiseRegion(EventRaiseRegion eventRaiseRegion, object d) {
			if ((eventRaiseRegion == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((eventRaiseRegion.Attributes == null)) {
				return SetFailure();
			}
			if ((eventRaiseRegion.Block == null)) {
				return SetFailure();
			}
			if ((eventRaiseRegion.Parameters == null)) {
				return SetFailure();
			}
			if(eventRaiseRegion.GetType() != d.GetType()) {return SetFailure();}
			var data = (EventRaiseRegion)d;
			if (!IsMatch(eventRaiseRegion, data)) {
				return SetFailure();
			}
			if (eventRaiseRegion.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<eventRaiseRegion.Attributes.Count;i++) {
				AttributeSection o = eventRaiseRegion.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			eventRaiseRegion.Block.AcceptVisitor(this, data.Block);
			if (eventRaiseRegion.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<eventRaiseRegion.Parameters.Count;i++) {
				ParameterDeclarationExpression o = eventRaiseRegion.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitEventRemoveRegion(EventRemoveRegion eventRemoveRegion, object d) {
			if ((eventRemoveRegion == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((eventRemoveRegion.Attributes == null)) {
				return SetFailure();
			}
			if ((eventRemoveRegion.Block == null)) {
				return SetFailure();
			}
			if ((eventRemoveRegion.Parameters == null)) {
				return SetFailure();
			}
			if(eventRemoveRegion.GetType() != d.GetType()) {return SetFailure();}
			var data = (EventRemoveRegion)d;
			if (!IsMatch(eventRemoveRegion, data)) {
				return SetFailure();
			}
			if (eventRemoveRegion.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<eventRemoveRegion.Attributes.Count;i++) {
				AttributeSection o = eventRemoveRegion.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			eventRemoveRegion.Block.AcceptVisitor(this, data.Block);
			if (eventRemoveRegion.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<eventRemoveRegion.Parameters.Count;i++) {
				ParameterDeclarationExpression o = eventRemoveRegion.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitExitStatement(ExitStatement exitStatement, object d) {
			if ((exitStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(exitStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ExitStatement)d;
			if (!IsMatch(exitStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitExpressionRangeVariable(ExpressionRangeVariable expressionRangeVariable, object d) {
			if ((expressionRangeVariable == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((expressionRangeVariable.Expression == null)) {
				return SetFailure();
			}
			if ((expressionRangeVariable.Type == null)) {
				return SetFailure();
			}
			if(expressionRangeVariable.GetType() != d.GetType()) {return SetFailure();}
			var data = (ExpressionRangeVariable)d;
			if (!IsMatch(expressionRangeVariable, data)) {
				return SetFailure();
			}
			expressionRangeVariable.Expression.AcceptVisitor(this, data.Expression);
			return expressionRangeVariable.Type.AcceptVisitor(this, data.Type);
		}
		
		public virtual bool VisitExpressionStatement(ExpressionStatement expressionStatement, object d) {
			if ((expressionStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((expressionStatement.Expression == null)) {
				return SetFailure();
			}
			if(expressionStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ExpressionStatement)d;
			if (!IsMatch(expressionStatement, data)) {
				return SetFailure();
			}
			return expressionStatement.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitExternAliasDirective(ExternAliasDirective externAliasDirective, object d) {
			if ((externAliasDirective == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(externAliasDirective.GetType() != d.GetType()) {return SetFailure();}
			var data = (ExternAliasDirective)d;
			if (!IsMatch(externAliasDirective, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitFieldDeclaration(FieldDeclaration fieldDeclaration, object d) {
			if ((fieldDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((fieldDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((fieldDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if ((fieldDeclaration.Fields == null)) {
				return SetFailure();
			}
			if(fieldDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (FieldDeclaration)d;
			if (!IsMatch(fieldDeclaration, data)) {
				return SetFailure();
			}
			if (fieldDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<fieldDeclaration.Attributes.Count;i++) {
				AttributeSection o = fieldDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			fieldDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
			if (fieldDeclaration.Fields.Count == data.Fields.Count) {
			for (int i=0; i<fieldDeclaration.Fields.Count;i++) {
				VariableDeclaration o = fieldDeclaration.Fields[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Fields[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitFixedStatement(FixedStatement fixedStatement, object d) {
			if ((fixedStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((fixedStatement.PointerDeclaration == null)) {
				return SetFailure();
			}
			if ((fixedStatement.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(fixedStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (FixedStatement)d;
			if (!IsMatch(fixedStatement, data)) {
				return SetFailure();
			}
			fixedStatement.PointerDeclaration.AcceptVisitor(this, data.PointerDeclaration);
			return fixedStatement.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitForeachStatement(ForeachStatement foreachStatement, object d) {
			if ((foreachStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((foreachStatement.TypeReference == null)) {
				return SetFailure();
			}
			if ((foreachStatement.Expression == null)) {
				return SetFailure();
			}
			if ((foreachStatement.NextExpression == null)) {
				return SetFailure();
			}
			if ((foreachStatement.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(foreachStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ForeachStatement)d;
			if (!IsMatch(foreachStatement, data)) {
				return SetFailure();
			}
			foreachStatement.TypeReference.AcceptVisitor(this, data.TypeReference);
			foreachStatement.Expression.AcceptVisitor(this, data.Expression);
			foreachStatement.NextExpression.AcceptVisitor(this, data.NextExpression);
			return foreachStatement.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitForNextStatement(ForNextStatement forNextStatement, object d) {
			if ((forNextStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((forNextStatement.Start == null)) {
				return SetFailure();
			}
			if ((forNextStatement.End == null)) {
				return SetFailure();
			}
			if ((forNextStatement.Step == null)) {
				return SetFailure();
			}
			if ((forNextStatement.NextExpressions == null)) {
				return SetFailure();
			}
			if ((forNextStatement.TypeReference == null)) {
				return SetFailure();
			}
			if ((forNextStatement.LoopVariableExpression == null)) {
				return SetFailure();
			}
			if ((forNextStatement.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(forNextStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ForNextStatement)d;
			if (!IsMatch(forNextStatement, data)) {
				return SetFailure();
			}
			forNextStatement.Start.AcceptVisitor(this, data.Start);
			forNextStatement.End.AcceptVisitor(this, data.End);
			forNextStatement.Step.AcceptVisitor(this, data.Step);
			if (forNextStatement.NextExpressions.Count == data.NextExpressions.Count) {
			for (int i=0; i<forNextStatement.NextExpressions.Count;i++) {
				Expression o = forNextStatement.NextExpressions[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.NextExpressions[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			forNextStatement.TypeReference.AcceptVisitor(this, data.TypeReference);
			forNextStatement.LoopVariableExpression.AcceptVisitor(this, data.LoopVariableExpression);
			return forNextStatement.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitForStatement(ForStatement forStatement, object d) {
			if ((forStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((forStatement.Initializers == null)) {
				return SetFailure();
			}
			if ((forStatement.Condition == null)) {
				return SetFailure();
			}
			if ((forStatement.Iterator == null)) {
				return SetFailure();
			}
			if ((forStatement.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(forStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ForStatement)d;
			if (!IsMatch(forStatement, data)) {
				return SetFailure();
			}
			if (forStatement.Initializers.Count == data.Initializers.Count) {
			for (int i=0; i<forStatement.Initializers.Count;i++) {
				Statement o = forStatement.Initializers[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Initializers[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			forStatement.Condition.AcceptVisitor(this, data.Condition);
			if (forStatement.Iterator.Count == data.Iterator.Count) {
			for (int i=0; i<forStatement.Iterator.Count;i++) {
				Statement o = forStatement.Iterator[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Iterator[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return forStatement.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitGotoCaseStatement(GotoCaseStatement gotoCaseStatement, object d) {
			if ((gotoCaseStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((gotoCaseStatement.Expression == null)) {
				return SetFailure();
			}
			if(gotoCaseStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (GotoCaseStatement)d;
			if (!IsMatch(gotoCaseStatement, data)) {
				return SetFailure();
			}
			return gotoCaseStatement.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitGotoStatement(GotoStatement gotoStatement, object d) {
			if ((gotoStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(gotoStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (GotoStatement)d;
			if (!IsMatch(gotoStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitIdentifierExpression(IdentifierExpression identifierExpression, object d) {
			if ((identifierExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((identifierExpression.TypeArguments == null)) {
				return SetFailure();
			}
			if(identifierExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (IdentifierExpression)d;
			if (!IsMatch(identifierExpression, data)) {
				return SetFailure();
			}
			if (identifierExpression.TypeArguments.Count == data.TypeArguments.Count) {
			for (int i=0; i<identifierExpression.TypeArguments.Count;i++) {
				TypeReference o = identifierExpression.TypeArguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.TypeArguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitIfElseStatement(IfElseStatement ifElseStatement, object d) {
			if ((ifElseStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((ifElseStatement.Condition == null)) {
				return SetFailure();
			}
			if ((ifElseStatement.TrueStatement == null)) {
				return SetFailure();
			}
			if ((ifElseStatement.FalseStatement == null)) {
				return SetFailure();
			}
			if ((ifElseStatement.ElseIfSections == null)) {
				return SetFailure();
			}
			if(ifElseStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (IfElseStatement)d;
			if (!IsMatch(ifElseStatement, data)) {
				return SetFailure();
			}
			ifElseStatement.Condition.AcceptVisitor(this, data.Condition);
			if (ifElseStatement.TrueStatement.Count == data.TrueStatement.Count) {
			for (int i=0; i<ifElseStatement.TrueStatement.Count;i++) {
				Statement o = ifElseStatement.TrueStatement[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.TrueStatement[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (ifElseStatement.FalseStatement.Count == data.FalseStatement.Count) {
			for (int i=0; i<ifElseStatement.FalseStatement.Count;i++) {
				Statement o = ifElseStatement.FalseStatement[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.FalseStatement[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (ifElseStatement.ElseIfSections.Count == data.ElseIfSections.Count) {
			for (int i=0; i<ifElseStatement.ElseIfSections.Count;i++) {
				ElseIfSection o = ifElseStatement.ElseIfSections[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.ElseIfSections[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitIndexerDeclaration(IndexerDeclaration indexerDeclaration, object d) {
			if ((indexerDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((indexerDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((indexerDeclaration.Parameters == null)) {
				return SetFailure();
			}
			if ((indexerDeclaration.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((indexerDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if ((indexerDeclaration.GetRegion == null)) {
				return SetFailure();
			}
			if ((indexerDeclaration.SetRegion == null)) {
				return SetFailure();
			}
			if(indexerDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (IndexerDeclaration)d;
			if (!IsMatch(indexerDeclaration, data)) {
				return SetFailure();
			}
			if (indexerDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<indexerDeclaration.Attributes.Count;i++) {
				AttributeSection o = indexerDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (indexerDeclaration.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<indexerDeclaration.Parameters.Count;i++) {
				ParameterDeclarationExpression o = indexerDeclaration.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (indexerDeclaration.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<indexerDeclaration.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = indexerDeclaration.InterfaceImplementations[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			indexerDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
			indexerDeclaration.GetRegion.AcceptVisitor(this, data.GetRegion);
			return indexerDeclaration.SetRegion.AcceptVisitor(this, data.SetRegion);
		}
		
		public virtual bool VisitIndexerExpression(IndexerExpression indexerExpression, object d) {
			if ((indexerExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((indexerExpression.TargetObject == null)) {
				return SetFailure();
			}
			if ((indexerExpression.Indexes == null)) {
				return SetFailure();
			}
			if(indexerExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (IndexerExpression)d;
			if (!IsMatch(indexerExpression, data)) {
				return SetFailure();
			}
			indexerExpression.TargetObject.AcceptVisitor(this, data.TargetObject);
			if (indexerExpression.Indexes.Count == data.Indexes.Count) {
			for (int i=0; i<indexerExpression.Indexes.Count;i++) {
				Expression o = indexerExpression.Indexes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Indexes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitInnerClassTypeReference(InnerClassTypeReference innerClassTypeReference, object d) {
			if ((innerClassTypeReference == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((innerClassTypeReference.GenericTypes == null)) {
				return SetFailure();
			}
			if ((innerClassTypeReference.BaseType == null)) {
				return SetFailure();
			}
			if(innerClassTypeReference.GetType() != d.GetType()) {return SetFailure();}
			var data = (InnerClassTypeReference)d;
			if (!IsMatch(innerClassTypeReference, data)) {
				return SetFailure();
			}
			if (innerClassTypeReference.GenericTypes.Count == data.GenericTypes.Count) {
			for (int i=0; i<innerClassTypeReference.GenericTypes.Count;i++) {
				TypeReference o = innerClassTypeReference.GenericTypes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.GenericTypes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return innerClassTypeReference.BaseType.AcceptVisitor(this, data.BaseType);
		}
		
		public virtual bool VisitInterfaceImplementation(InterfaceImplementation interfaceImplementation, object d) {
			if ((interfaceImplementation == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((interfaceImplementation.InterfaceType == null)) {
				return SetFailure();
			}
			if(interfaceImplementation.GetType() != d.GetType()) {return SetFailure();}
			var data = (InterfaceImplementation)d;
			if (!IsMatch(interfaceImplementation, data)) {
				return SetFailure();
			}
			return interfaceImplementation.InterfaceType.AcceptVisitor(this, data.InterfaceType);
		}
		
		public virtual bool VisitInvocationExpression(InvocationExpression invocationExpression, object d) {
			if ((invocationExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((invocationExpression.TargetObject == null)) {
				return SetFailure();
			}
			if ((invocationExpression.Arguments == null)) {
				return SetFailure();
			}
			if(invocationExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (InvocationExpression)d;
			if (!IsMatch(invocationExpression, data)) {
				return SetFailure();
			}
			invocationExpression.TargetObject.AcceptVisitor(this, data.TargetObject);
			if (invocationExpression.Arguments.Count == data.Arguments.Count) {
			for (int i=0; i<invocationExpression.Arguments.Count;i++) {
				Expression o = invocationExpression.Arguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Arguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitLabelStatement(LabelStatement labelStatement, object d) {
			if ((labelStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(labelStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (LabelStatement)d;
			if (!IsMatch(labelStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitLambdaExpression(LambdaExpression lambdaExpression, object d) {
			if ((lambdaExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((lambdaExpression.Parameters == null)) {
				return SetFailure();
			}
			if ((lambdaExpression.StatementBody == null)) {
				return SetFailure();
			}
			if ((lambdaExpression.ExpressionBody == null)) {
				return SetFailure();
			}
			if(lambdaExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (LambdaExpression)d;
			if (!IsMatch(lambdaExpression, data)) {
				return SetFailure();
			}
			if (lambdaExpression.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<lambdaExpression.Parameters.Count;i++) {
				ParameterDeclarationExpression o = lambdaExpression.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			lambdaExpression.StatementBody.AcceptVisitor(this, data.StatementBody);
			return lambdaExpression.ExpressionBody.AcceptVisitor(this, data.ExpressionBody);
		}
		
		public virtual bool VisitLocalVariableDeclaration(LocalVariableDeclaration localVariableDeclaration, object d) {
			if ((localVariableDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((localVariableDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if ((localVariableDeclaration.Variables == null)) {
				return SetFailure();
			}
			if(localVariableDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (LocalVariableDeclaration)d;
			if (!IsMatch(localVariableDeclaration, data)) {
				return SetFailure();
			}
			localVariableDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
			if (localVariableDeclaration.Variables.Count == data.Variables.Count) {
			for (int i=0; i<localVariableDeclaration.Variables.Count;i++) {
				VariableDeclaration o = localVariableDeclaration.Variables[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Variables[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitLockStatement(LockStatement lockStatement, object d) {
			if ((lockStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((lockStatement.LockExpression == null)) {
				return SetFailure();
			}
			if ((lockStatement.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(lockStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (LockStatement)d;
			if (!IsMatch(lockStatement, data)) {
				return SetFailure();
			}
			lockStatement.LockExpression.AcceptVisitor(this, data.LockExpression);
			return lockStatement.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitMemberReferenceExpression(MemberReferenceExpression memberReferenceExpression, object d) {
			if ((memberReferenceExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((memberReferenceExpression.TargetObject == null)) {
				return SetFailure();
			}
			if ((memberReferenceExpression.TypeArguments == null)) {
				return SetFailure();
			}
			if(memberReferenceExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (MemberReferenceExpression)d;
			if (!IsMatch(memberReferenceExpression, data)) {
				return SetFailure();
			}
			memberReferenceExpression.TargetObject.AcceptVisitor(this, data.TargetObject);
			if (memberReferenceExpression.TypeArguments.Count == data.TypeArguments.Count) {
			for (int i=0; i<memberReferenceExpression.TypeArguments.Count;i++) {
				TypeReference o = memberReferenceExpression.TypeArguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.TypeArguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitMethodDeclaration(MethodDeclaration methodDeclaration, object d) {
			if ((methodDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((methodDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((methodDeclaration.Parameters == null)) {
				return SetFailure();
			}
			if ((methodDeclaration.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((methodDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if ((methodDeclaration.Body == null)) {
				return SetFailure();
			}
			if ((methodDeclaration.Templates == null)) {
				return SetFailure();
			}
			if(methodDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (MethodDeclaration)d;
			if (!IsMatch(methodDeclaration, data)) {
				return SetFailure();
			}
			if (methodDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<methodDeclaration.Attributes.Count;i++) {
				AttributeSection o = methodDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (methodDeclaration.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<methodDeclaration.Parameters.Count;i++) {
				ParameterDeclarationExpression o = methodDeclaration.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (methodDeclaration.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<methodDeclaration.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = methodDeclaration.InterfaceImplementations[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			methodDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
			methodDeclaration.Body.AcceptVisitor(this, data.Body);
			if (methodDeclaration.Templates.Count == data.Templates.Count) {
			for (int i=0; i<methodDeclaration.Templates.Count;i++) {
				TemplateDefinition o = methodDeclaration.Templates[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Templates[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitNamedArgumentExpression(NamedArgumentExpression namedArgumentExpression, object d) {
			if ((namedArgumentExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((namedArgumentExpression.Expression == null)) {
				return SetFailure();
			}
			if(namedArgumentExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (NamedArgumentExpression)d;
			if (!IsMatch(namedArgumentExpression, data)) {
				return SetFailure();
			}
			return namedArgumentExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitNamespaceDeclaration(NamespaceDeclaration namespaceDeclaration, object d) {
			if ((namespaceDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(namespaceDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (NamespaceDeclaration)d;
			if (!IsMatch(namespaceDeclaration, data)) {
				return SetFailure();
			}
			return namespaceDeclaration.AcceptChildren(this, d);
		}
		
		public virtual bool VisitObjectCreateExpression(ObjectCreateExpression objectCreateExpression, object d) {
			if ((objectCreateExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((objectCreateExpression.CreateType == null)) {
				return SetFailure();
			}
			if ((objectCreateExpression.Parameters == null)) {
				return SetFailure();
			}
			if ((objectCreateExpression.ObjectInitializer == null)) {
				return SetFailure();
			}
			if(objectCreateExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (ObjectCreateExpression)d;
			if (!IsMatch(objectCreateExpression, data)) {
				return SetFailure();
			}
			objectCreateExpression.CreateType.AcceptVisitor(this, data.CreateType);
			if (objectCreateExpression.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<objectCreateExpression.Parameters.Count;i++) {
				Expression o = objectCreateExpression.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return objectCreateExpression.ObjectInitializer.AcceptVisitor(this, data.ObjectInitializer);
		}
		
		public virtual bool VisitOnErrorStatement(OnErrorStatement onErrorStatement, object d) {
			if ((onErrorStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((onErrorStatement.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(onErrorStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (OnErrorStatement)d;
			if (!IsMatch(onErrorStatement, data)) {
				return SetFailure();
			}
			return onErrorStatement.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitOperatorDeclaration(OperatorDeclaration operatorDeclaration, object d) {
			if ((operatorDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((operatorDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((operatorDeclaration.Parameters == null)) {
				return SetFailure();
			}
			if ((operatorDeclaration.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((operatorDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if ((operatorDeclaration.Body == null)) {
				return SetFailure();
			}
			if ((operatorDeclaration.Templates == null)) {
				return SetFailure();
			}
			if ((operatorDeclaration.ReturnTypeAttributes == null)) {
				return SetFailure();
			}
			if(operatorDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (OperatorDeclaration)d;
			if (!IsMatch(operatorDeclaration, data)) {
				return SetFailure();
			}
			if (operatorDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<operatorDeclaration.Attributes.Count;i++) {
				AttributeSection o = operatorDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (operatorDeclaration.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<operatorDeclaration.Parameters.Count;i++) {
				ParameterDeclarationExpression o = operatorDeclaration.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (operatorDeclaration.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<operatorDeclaration.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = operatorDeclaration.InterfaceImplementations[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			operatorDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
			operatorDeclaration.Body.AcceptVisitor(this, data.Body);
			if (operatorDeclaration.Templates.Count == data.Templates.Count) {
			for (int i=0; i<operatorDeclaration.Templates.Count;i++) {
				TemplateDefinition o = operatorDeclaration.Templates[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Templates[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (operatorDeclaration.ReturnTypeAttributes.Count == data.ReturnTypeAttributes.Count) {
			for (int i=0; i<operatorDeclaration.ReturnTypeAttributes.Count;i++) {
				AttributeSection o = operatorDeclaration.ReturnTypeAttributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.ReturnTypeAttributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitOptionDeclaration(OptionDeclaration optionDeclaration, object d) {
			if ((optionDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(optionDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (OptionDeclaration)d;
			if (!IsMatch(optionDeclaration, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitParameterDeclarationExpression(ParameterDeclarationExpression parameterDeclarationExpression, object d) {
			if ((parameterDeclarationExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((parameterDeclarationExpression.Attributes == null)) {
				return SetFailure();
			}
			if ((parameterDeclarationExpression.TypeReference == null)) {
				return SetFailure();
			}
			if ((parameterDeclarationExpression.DefaultValue == null)) {
				return SetFailure();
			}
			if(parameterDeclarationExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (ParameterDeclarationExpression)d;
			if (!IsMatch(parameterDeclarationExpression, data)) {
				return SetFailure();
			}
			if (parameterDeclarationExpression.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<parameterDeclarationExpression.Attributes.Count;i++) {
				AttributeSection o = parameterDeclarationExpression.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			parameterDeclarationExpression.TypeReference.AcceptVisitor(this, data.TypeReference);
			return parameterDeclarationExpression.DefaultValue.AcceptVisitor(this, data.DefaultValue);
		}
		
		public virtual bool VisitParenthesizedExpression(ParenthesizedExpression parenthesizedExpression, object d) {
			if ((parenthesizedExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((parenthesizedExpression.Expression == null)) {
				return SetFailure();
			}
			if(parenthesizedExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (ParenthesizedExpression)d;
			if (!IsMatch(parenthesizedExpression, data)) {
				return SetFailure();
			}
			return parenthesizedExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitPointerReferenceExpression(PointerReferenceExpression pointerReferenceExpression, object d) {
			if ((pointerReferenceExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((pointerReferenceExpression.TargetObject == null)) {
				return SetFailure();
			}
			if ((pointerReferenceExpression.TypeArguments == null)) {
				return SetFailure();
			}
			if(pointerReferenceExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (PointerReferenceExpression)d;
			if (!IsMatch(pointerReferenceExpression, data)) {
				return SetFailure();
			}
			pointerReferenceExpression.TargetObject.AcceptVisitor(this, data.TargetObject);
			if (pointerReferenceExpression.TypeArguments.Count == data.TypeArguments.Count) {
			for (int i=0; i<pointerReferenceExpression.TypeArguments.Count;i++) {
				TypeReference o = pointerReferenceExpression.TypeArguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.TypeArguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitPrimitiveExpression(PrimitiveExpression primitiveExpression, object d) {
			if ((primitiveExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(primitiveExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (PrimitiveExpression)d;
			if (!IsMatch(primitiveExpression, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitPropertyDeclaration(PropertyDeclaration propertyDeclaration, object d) {
			if ((propertyDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((propertyDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((propertyDeclaration.Parameters == null)) {
				return SetFailure();
			}
			if ((propertyDeclaration.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((propertyDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if ((propertyDeclaration.GetRegion == null)) {
				return SetFailure();
			}
			if ((propertyDeclaration.SetRegion == null)) {
				return SetFailure();
			}
			if(propertyDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (PropertyDeclaration)d;
			if (!IsMatch(propertyDeclaration, data)) {
				return SetFailure();
			}
			if (propertyDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<propertyDeclaration.Attributes.Count;i++) {
				AttributeSection o = propertyDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (propertyDeclaration.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<propertyDeclaration.Parameters.Count;i++) {
				ParameterDeclarationExpression o = propertyDeclaration.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (propertyDeclaration.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<propertyDeclaration.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = propertyDeclaration.InterfaceImplementations[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			propertyDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
			propertyDeclaration.GetRegion.AcceptVisitor(this, data.GetRegion);
			return propertyDeclaration.SetRegion.AcceptVisitor(this, data.SetRegion);
		}
		
		public virtual bool VisitPropertyGetRegion(PropertyGetRegion propertyGetRegion, object d) {
			if ((propertyGetRegion == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((propertyGetRegion.Attributes == null)) {
				return SetFailure();
			}
			if ((propertyGetRegion.Block == null)) {
				return SetFailure();
			}
			if(propertyGetRegion.GetType() != d.GetType()) {return SetFailure();}
			var data = (PropertyGetRegion)d;
			if (!IsMatch(propertyGetRegion, data)) {
				return SetFailure();
			}
			if (propertyGetRegion.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<propertyGetRegion.Attributes.Count;i++) {
				AttributeSection o = propertyGetRegion.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return propertyGetRegion.Block.AcceptVisitor(this, data.Block);
		}
		
		public virtual bool VisitPropertySetRegion(PropertySetRegion propertySetRegion, object d) {
			if ((propertySetRegion == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((propertySetRegion.Attributes == null)) {
				return SetFailure();
			}
			if ((propertySetRegion.Block == null)) {
				return SetFailure();
			}
			if ((propertySetRegion.Parameters == null)) {
				return SetFailure();
			}
			if(propertySetRegion.GetType() != d.GetType()) {return SetFailure();}
			var data = (PropertySetRegion)d;
			if (!IsMatch(propertySetRegion, data)) {
				return SetFailure();
			}
			if (propertySetRegion.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<propertySetRegion.Attributes.Count;i++) {
				AttributeSection o = propertySetRegion.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			propertySetRegion.Block.AcceptVisitor(this, data.Block);
			if (propertySetRegion.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<propertySetRegion.Parameters.Count;i++) {
				ParameterDeclarationExpression o = propertySetRegion.Parameters[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitQueryExpression(QueryExpression queryExpression, object d) {
			if ((queryExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpression.FromClause == null)) {
				return SetFailure();
			}
			if ((queryExpression.MiddleClauses == null)) {
				return SetFailure();
			}
			if ((queryExpression.SelectOrGroupClause == null)) {
				return SetFailure();
			}
			if(queryExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpression)d;
			if (!IsMatch(queryExpression, data)) {
				return SetFailure();
			}
			queryExpression.FromClause.AcceptVisitor(this, data.FromClause);
			if (queryExpression.MiddleClauses.Count == data.MiddleClauses.Count) {
			for (int i=0; i<queryExpression.MiddleClauses.Count;i++) {
				QueryExpressionClause o = queryExpression.MiddleClauses[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.MiddleClauses[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return queryExpression.SelectOrGroupClause.AcceptVisitor(this, data.SelectOrGroupClause);
		}
		
		public virtual bool VisitQueryExpressionAggregateClause(QueryExpressionAggregateClause queryExpressionAggregateClause, object d) {
			if ((queryExpressionAggregateClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionAggregateClause.FromClause == null)) {
				return SetFailure();
			}
			if ((queryExpressionAggregateClause.MiddleClauses == null)) {
				return SetFailure();
			}
			if ((queryExpressionAggregateClause.IntoVariables == null)) {
				return SetFailure();
			}
			if(queryExpressionAggregateClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionAggregateClause)d;
			if (!IsMatch(queryExpressionAggregateClause, data)) {
				return SetFailure();
			}
			queryExpressionAggregateClause.FromClause.AcceptVisitor(this, data.FromClause);
			if (queryExpressionAggregateClause.MiddleClauses.Count == data.MiddleClauses.Count) {
			for (int i=0; i<queryExpressionAggregateClause.MiddleClauses.Count;i++) {
				QueryExpressionClause o = queryExpressionAggregateClause.MiddleClauses[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.MiddleClauses[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (queryExpressionAggregateClause.IntoVariables.Count == data.IntoVariables.Count) {
			for (int i=0; i<queryExpressionAggregateClause.IntoVariables.Count;i++) {
				ExpressionRangeVariable o = queryExpressionAggregateClause.IntoVariables[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.IntoVariables[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionDistinctClause(QueryExpressionDistinctClause queryExpressionDistinctClause, object d) {
			if ((queryExpressionDistinctClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(queryExpressionDistinctClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionDistinctClause)d;
			if (!IsMatch(queryExpressionDistinctClause, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitQueryExpressionFromClause(QueryExpressionFromClause queryExpressionFromClause, object d) {
			if ((queryExpressionFromClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionFromClause.Type == null)) {
				return SetFailure();
			}
			if ((queryExpressionFromClause.InExpression == null)) {
				return SetFailure();
			}
			if(queryExpressionFromClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionFromClause)d;
			if (!IsMatch(queryExpressionFromClause, data)) {
				return SetFailure();
			}
			queryExpressionFromClause.Type.AcceptVisitor(this, data.Type);
			return queryExpressionFromClause.InExpression.AcceptVisitor(this, data.InExpression);
		}
		
		public virtual bool VisitQueryExpressionGroupClause(QueryExpressionGroupClause queryExpressionGroupClause, object d) {
			if ((queryExpressionGroupClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionGroupClause.Projection == null)) {
				return SetFailure();
			}
			if ((queryExpressionGroupClause.GroupBy == null)) {
				return SetFailure();
			}
			if(queryExpressionGroupClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionGroupClause)d;
			if (!IsMatch(queryExpressionGroupClause, data)) {
				return SetFailure();
			}
			queryExpressionGroupClause.Projection.AcceptVisitor(this, data.Projection);
			return queryExpressionGroupClause.GroupBy.AcceptVisitor(this, data.GroupBy);
		}
		
		public virtual bool VisitQueryExpressionGroupJoinVBClause(QueryExpressionGroupJoinVBClause queryExpressionGroupJoinVBClause, object d) {
			if ((queryExpressionGroupJoinVBClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionGroupJoinVBClause.JoinClause == null)) {
				return SetFailure();
			}
			if ((queryExpressionGroupJoinVBClause.IntoVariables == null)) {
				return SetFailure();
			}
			if(queryExpressionGroupJoinVBClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionGroupJoinVBClause)d;
			if (!IsMatch(queryExpressionGroupJoinVBClause, data)) {
				return SetFailure();
			}
			queryExpressionGroupJoinVBClause.JoinClause.AcceptVisitor(this, data.JoinClause);
			if (queryExpressionGroupJoinVBClause.IntoVariables.Count == data.IntoVariables.Count) {
			for (int i=0; i<queryExpressionGroupJoinVBClause.IntoVariables.Count;i++) {
				ExpressionRangeVariable o = queryExpressionGroupJoinVBClause.IntoVariables[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.IntoVariables[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionGroupVBClause(QueryExpressionGroupVBClause queryExpressionGroupVBClause, object d) {
			if ((queryExpressionGroupVBClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionGroupVBClause.GroupVariables == null)) {
				return SetFailure();
			}
			if ((queryExpressionGroupVBClause.ByVariables == null)) {
				return SetFailure();
			}
			if ((queryExpressionGroupVBClause.IntoVariables == null)) {
				return SetFailure();
			}
			if(queryExpressionGroupVBClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionGroupVBClause)d;
			if (!IsMatch(queryExpressionGroupVBClause, data)) {
				return SetFailure();
			}
			if (queryExpressionGroupVBClause.GroupVariables.Count == data.GroupVariables.Count) {
			for (int i=0; i<queryExpressionGroupVBClause.GroupVariables.Count;i++) {
				ExpressionRangeVariable o = queryExpressionGroupVBClause.GroupVariables[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.GroupVariables[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (queryExpressionGroupVBClause.ByVariables.Count == data.ByVariables.Count) {
			for (int i=0; i<queryExpressionGroupVBClause.ByVariables.Count;i++) {
				ExpressionRangeVariable o = queryExpressionGroupVBClause.ByVariables[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.ByVariables[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (queryExpressionGroupVBClause.IntoVariables.Count == data.IntoVariables.Count) {
			for (int i=0; i<queryExpressionGroupVBClause.IntoVariables.Count;i++) {
				ExpressionRangeVariable o = queryExpressionGroupVBClause.IntoVariables[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.IntoVariables[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionJoinClause(QueryExpressionJoinClause queryExpressionJoinClause, object d) {
			if ((queryExpressionJoinClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinClause.Type == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinClause.InExpression == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinClause.OnExpression == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinClause.EqualsExpression == null)) {
				return SetFailure();
			}
			if(queryExpressionJoinClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionJoinClause)d;
			if (!IsMatch(queryExpressionJoinClause, data)) {
				return SetFailure();
			}
			queryExpressionJoinClause.Type.AcceptVisitor(this, data.Type);
			queryExpressionJoinClause.InExpression.AcceptVisitor(this, data.InExpression);
			queryExpressionJoinClause.OnExpression.AcceptVisitor(this, data.OnExpression);
			return queryExpressionJoinClause.EqualsExpression.AcceptVisitor(this, data.EqualsExpression);
		}
		
		public virtual bool VisitQueryExpressionJoinConditionVB(QueryExpressionJoinConditionVB queryExpressionJoinConditionVB, object d) {
			if ((queryExpressionJoinConditionVB == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinConditionVB.LeftSide == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinConditionVB.RightSide == null)) {
				return SetFailure();
			}
			if(queryExpressionJoinConditionVB.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionJoinConditionVB)d;
			if (!IsMatch(queryExpressionJoinConditionVB, data)) {
				return SetFailure();
			}
			queryExpressionJoinConditionVB.LeftSide.AcceptVisitor(this, data.LeftSide);
			return queryExpressionJoinConditionVB.RightSide.AcceptVisitor(this, data.RightSide);
		}
		
		public virtual bool VisitQueryExpressionJoinVBClause(QueryExpressionJoinVBClause queryExpressionJoinVBClause, object d) {
			if ((queryExpressionJoinVBClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinVBClause.JoinVariable == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinVBClause.SubJoin == null)) {
				return SetFailure();
			}
			if ((queryExpressionJoinVBClause.Conditions == null)) {
				return SetFailure();
			}
			if(queryExpressionJoinVBClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionJoinVBClause)d;
			if (!IsMatch(queryExpressionJoinVBClause, data)) {
				return SetFailure();
			}
			queryExpressionJoinVBClause.JoinVariable.AcceptVisitor(this, data.JoinVariable);
			queryExpressionJoinVBClause.SubJoin.AcceptVisitor(this, data.SubJoin);
			if (queryExpressionJoinVBClause.Conditions.Count == data.Conditions.Count) {
			for (int i=0; i<queryExpressionJoinVBClause.Conditions.Count;i++) {
				QueryExpressionJoinConditionVB o = queryExpressionJoinVBClause.Conditions[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Conditions[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionLetClause(QueryExpressionLetClause queryExpressionLetClause, object d) {
			if ((queryExpressionLetClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionLetClause.Expression == null)) {
				return SetFailure();
			}
			if(queryExpressionLetClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionLetClause)d;
			if (!IsMatch(queryExpressionLetClause, data)) {
				return SetFailure();
			}
			return queryExpressionLetClause.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitQueryExpressionLetVBClause(QueryExpressionLetVBClause queryExpressionLetVBClause, object d) {
			if ((queryExpressionLetVBClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionLetVBClause.Variables == null)) {
				return SetFailure();
			}
			if(queryExpressionLetVBClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionLetVBClause)d;
			if (!IsMatch(queryExpressionLetVBClause, data)) {
				return SetFailure();
			}
			if (queryExpressionLetVBClause.Variables.Count == data.Variables.Count) {
			for (int i=0; i<queryExpressionLetVBClause.Variables.Count;i++) {
				ExpressionRangeVariable o = queryExpressionLetVBClause.Variables[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Variables[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionOrderClause(QueryExpressionOrderClause queryExpressionOrderClause, object d) {
			if ((queryExpressionOrderClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionOrderClause.Orderings == null)) {
				return SetFailure();
			}
			if(queryExpressionOrderClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionOrderClause)d;
			if (!IsMatch(queryExpressionOrderClause, data)) {
				return SetFailure();
			}
			if (queryExpressionOrderClause.Orderings.Count == data.Orderings.Count) {
			for (int i=0; i<queryExpressionOrderClause.Orderings.Count;i++) {
				QueryExpressionOrdering o = queryExpressionOrderClause.Orderings[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Orderings[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionOrdering(QueryExpressionOrdering queryExpressionOrdering, object d) {
			if ((queryExpressionOrdering == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionOrdering.Criteria == null)) {
				return SetFailure();
			}
			if(queryExpressionOrdering.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionOrdering)d;
			if (!IsMatch(queryExpressionOrdering, data)) {
				return SetFailure();
			}
			return queryExpressionOrdering.Criteria.AcceptVisitor(this, data.Criteria);
		}
		
		public virtual bool VisitQueryExpressionPartitionVBClause(QueryExpressionPartitionVBClause queryExpressionPartitionVBClause, object d) {
			if ((queryExpressionPartitionVBClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionPartitionVBClause.Expression == null)) {
				return SetFailure();
			}
			if(queryExpressionPartitionVBClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionPartitionVBClause)d;
			if (!IsMatch(queryExpressionPartitionVBClause, data)) {
				return SetFailure();
			}
			return queryExpressionPartitionVBClause.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitQueryExpressionSelectClause(QueryExpressionSelectClause queryExpressionSelectClause, object d) {
			if ((queryExpressionSelectClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionSelectClause.Projection == null)) {
				return SetFailure();
			}
			if(queryExpressionSelectClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionSelectClause)d;
			if (!IsMatch(queryExpressionSelectClause, data)) {
				return SetFailure();
			}
			return queryExpressionSelectClause.Projection.AcceptVisitor(this, data.Projection);
		}
		
		public virtual bool VisitQueryExpressionSelectVBClause(QueryExpressionSelectVBClause queryExpressionSelectVBClause, object d) {
			if ((queryExpressionSelectVBClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionSelectVBClause.Variables == null)) {
				return SetFailure();
			}
			if(queryExpressionSelectVBClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionSelectVBClause)d;
			if (!IsMatch(queryExpressionSelectVBClause, data)) {
				return SetFailure();
			}
			if (queryExpressionSelectVBClause.Variables.Count == data.Variables.Count) {
			for (int i=0; i<queryExpressionSelectVBClause.Variables.Count;i++) {
				ExpressionRangeVariable o = queryExpressionSelectVBClause.Variables[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Variables[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionWhereClause(QueryExpressionWhereClause queryExpressionWhereClause, object d) {
			if ((queryExpressionWhereClause == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((queryExpressionWhereClause.Condition == null)) {
				return SetFailure();
			}
			if(queryExpressionWhereClause.GetType() != d.GetType()) {return SetFailure();}
			var data = (QueryExpressionWhereClause)d;
			if (!IsMatch(queryExpressionWhereClause, data)) {
				return SetFailure();
			}
			return queryExpressionWhereClause.Condition.AcceptVisitor(this, data.Condition);
		}
		
		public virtual bool VisitRaiseEventStatement(RaiseEventStatement raiseEventStatement, object d) {
			if ((raiseEventStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((raiseEventStatement.Arguments == null)) {
				return SetFailure();
			}
			if(raiseEventStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (RaiseEventStatement)d;
			if (!IsMatch(raiseEventStatement, data)) {
				return SetFailure();
			}
			if (raiseEventStatement.Arguments.Count == data.Arguments.Count) {
			for (int i=0; i<raiseEventStatement.Arguments.Count;i++) {
				Expression o = raiseEventStatement.Arguments[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Arguments[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitReDimStatement(ReDimStatement reDimStatement, object d) {
			if ((reDimStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((reDimStatement.ReDimClauses == null)) {
				return SetFailure();
			}
			if(reDimStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ReDimStatement)d;
			if (!IsMatch(reDimStatement, data)) {
				return SetFailure();
			}
			if (reDimStatement.ReDimClauses.Count == data.ReDimClauses.Count) {
			for (int i=0; i<reDimStatement.ReDimClauses.Count;i++) {
				InvocationExpression o = reDimStatement.ReDimClauses[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.ReDimClauses[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitRemoveHandlerStatement(RemoveHandlerStatement removeHandlerStatement, object d) {
			if ((removeHandlerStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((removeHandlerStatement.EventExpression == null)) {
				return SetFailure();
			}
			if ((removeHandlerStatement.HandlerExpression == null)) {
				return SetFailure();
			}
			if(removeHandlerStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (RemoveHandlerStatement)d;
			if (!IsMatch(removeHandlerStatement, data)) {
				return SetFailure();
			}
			removeHandlerStatement.EventExpression.AcceptVisitor(this, data.EventExpression);
			return removeHandlerStatement.HandlerExpression.AcceptVisitor(this, data.HandlerExpression);
		}
		
		public virtual bool VisitResumeStatement(ResumeStatement resumeStatement, object d) {
			if ((resumeStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(resumeStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ResumeStatement)d;
			if (!IsMatch(resumeStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitReturnStatement(ReturnStatement returnStatement, object d) {
			if ((returnStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((returnStatement.Expression == null)) {
				return SetFailure();
			}
			if(returnStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ReturnStatement)d;
			if (!IsMatch(returnStatement, data)) {
				return SetFailure();
			}
			return returnStatement.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitSizeOfExpression(SizeOfExpression sizeOfExpression, object d) {
			if ((sizeOfExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((sizeOfExpression.TypeReference == null)) {
				return SetFailure();
			}
			if(sizeOfExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (SizeOfExpression)d;
			if (!IsMatch(sizeOfExpression, data)) {
				return SetFailure();
			}
			return sizeOfExpression.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitStackAllocExpression(StackAllocExpression stackAllocExpression, object d) {
			if ((stackAllocExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((stackAllocExpression.TypeReference == null)) {
				return SetFailure();
			}
			if ((stackAllocExpression.Expression == null)) {
				return SetFailure();
			}
			if(stackAllocExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (StackAllocExpression)d;
			if (!IsMatch(stackAllocExpression, data)) {
				return SetFailure();
			}
			stackAllocExpression.TypeReference.AcceptVisitor(this, data.TypeReference);
			return stackAllocExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitStopStatement(StopStatement stopStatement, object d) {
			if ((stopStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(stopStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (StopStatement)d;
			if (!IsMatch(stopStatement, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitSwitchSection(SwitchSection switchSection, object d) {
			if ((switchSection == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((switchSection.SwitchLabels == null)) {
				return SetFailure();
			}
			if(switchSection.GetType() != d.GetType()) {return SetFailure();}
			var data = (SwitchSection)d;
			if (!IsMatch(switchSection, data)) {
				return SetFailure();
			}
			if (switchSection.SwitchLabels.Count == data.SwitchLabels.Count) {
			for (int i=0; i<switchSection.SwitchLabels.Count;i++) {
				CaseLabel o = switchSection.SwitchLabels[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.SwitchLabels[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return switchSection.AcceptChildren(this, d);
		}
		
		public virtual bool VisitSwitchStatement(SwitchStatement switchStatement, object d) {
			if ((switchStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((switchStatement.SwitchExpression == null)) {
				return SetFailure();
			}
			if ((switchStatement.SwitchSections == null)) {
				return SetFailure();
			}
			if(switchStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (SwitchStatement)d;
			if (!IsMatch(switchStatement, data)) {
				return SetFailure();
			}
			switchStatement.SwitchExpression.AcceptVisitor(this, data.SwitchExpression);
			if (switchStatement.SwitchSections.Count == data.SwitchSections.Count) {
			for (int i=0; i<switchStatement.SwitchSections.Count;i++) {
				SwitchSection o = switchStatement.SwitchSections[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.SwitchSections[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitTemplateDefinition(TemplateDefinition templateDefinition, object d) {
			if ((templateDefinition == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((templateDefinition.Attributes == null)) {
				return SetFailure();
			}
			if ((templateDefinition.Bases == null)) {
				return SetFailure();
			}
			if(templateDefinition.GetType() != d.GetType()) {return SetFailure();}
			var data = (TemplateDefinition)d;
			if (!IsMatch(templateDefinition, data)) {
				return SetFailure();
			}
			if (templateDefinition.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<templateDefinition.Attributes.Count;i++) {
				AttributeSection o = templateDefinition.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (templateDefinition.Bases.Count == data.Bases.Count) {
			for (int i=0; i<templateDefinition.Bases.Count;i++) {
				TypeReference o = templateDefinition.Bases[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Bases[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitThisReferenceExpression(ThisReferenceExpression thisReferenceExpression, object d) {
			if ((thisReferenceExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(thisReferenceExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (ThisReferenceExpression)d;
			if (!IsMatch(thisReferenceExpression, data)) {
				return SetFailure();
			}
			return true;
		}
		
		public virtual bool VisitThrowStatement(ThrowStatement throwStatement, object d) {
			if ((throwStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((throwStatement.Expression == null)) {
				return SetFailure();
			}
			if(throwStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (ThrowStatement)d;
			if (!IsMatch(throwStatement, data)) {
				return SetFailure();
			}
			return throwStatement.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitTryCatchStatement(TryCatchStatement tryCatchStatement, object d) {
			if ((tryCatchStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((tryCatchStatement.StatementBlock == null)) {
				return SetFailure();
			}
			if ((tryCatchStatement.CatchClauses == null)) {
				return SetFailure();
			}
			if ((tryCatchStatement.FinallyBlock == null)) {
				return SetFailure();
			}
			if(tryCatchStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (TryCatchStatement)d;
			if (!IsMatch(tryCatchStatement, data)) {
				return SetFailure();
			}
			tryCatchStatement.StatementBlock.AcceptVisitor(this, data.StatementBlock);
			if (tryCatchStatement.CatchClauses.Count == data.CatchClauses.Count) {
			for (int i=0; i<tryCatchStatement.CatchClauses.Count;i++) {
				CatchClause o = tryCatchStatement.CatchClauses[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.CatchClauses[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return tryCatchStatement.FinallyBlock.AcceptVisitor(this, data.FinallyBlock);
		}
		
		public virtual bool VisitTypeDeclaration(TypeDeclaration typeDeclaration, object d) {
			if ((typeDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((typeDeclaration.Attributes == null)) {
				return SetFailure();
			}
			if ((typeDeclaration.BaseTypes == null)) {
				return SetFailure();
			}
			if ((typeDeclaration.Templates == null)) {
				return SetFailure();
			}
			if(typeDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (TypeDeclaration)d;
			if (!IsMatch(typeDeclaration, data)) {
				return SetFailure();
			}
			if (typeDeclaration.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<typeDeclaration.Attributes.Count;i++) {
				AttributeSection o = typeDeclaration.Attributes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (typeDeclaration.BaseTypes.Count == data.BaseTypes.Count) {
			for (int i=0; i<typeDeclaration.BaseTypes.Count;i++) {
				TypeReference o = typeDeclaration.BaseTypes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.BaseTypes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			if (typeDeclaration.Templates.Count == data.Templates.Count) {
			for (int i=0; i<typeDeclaration.Templates.Count;i++) {
				TemplateDefinition o = typeDeclaration.Templates[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Templates[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return typeDeclaration.AcceptChildren(this, d);
		}
		
		public virtual bool VisitTypeOfExpression(TypeOfExpression typeOfExpression, object d) {
			if ((typeOfExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((typeOfExpression.TypeReference == null)) {
				return SetFailure();
			}
			if(typeOfExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (TypeOfExpression)d;
			if (!IsMatch(typeOfExpression, data)) {
				return SetFailure();
			}
			return typeOfExpression.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitTypeOfIsExpression(TypeOfIsExpression typeOfIsExpression, object d) {
			if ((typeOfIsExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((typeOfIsExpression.Expression == null)) {
				return SetFailure();
			}
			if ((typeOfIsExpression.TypeReference == null)) {
				return SetFailure();
			}
			if(typeOfIsExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (TypeOfIsExpression)d;
			if (!IsMatch(typeOfIsExpression, data)) {
				return SetFailure();
			}
			typeOfIsExpression.Expression.AcceptVisitor(this, data.Expression);
			return typeOfIsExpression.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitTypeReference(TypeReference typeReference, object d) {
			if ((typeReference == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((typeReference.GenericTypes == null)) {
				return SetFailure();
			}
			if(typeReference.GetType() != d.GetType()) {return SetFailure();}
			var data = (TypeReference)d;
			if (!IsMatch(typeReference, data)) {
				return SetFailure();
			}
			if (typeReference.GenericTypes.Count == data.GenericTypes.Count) {
			for (int i=0; i<typeReference.GenericTypes.Count;i++) {
				TypeReference o = typeReference.GenericTypes[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.GenericTypes[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitTypeReferenceExpression(TypeReferenceExpression typeReferenceExpression, object d) {
			if ((typeReferenceExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((typeReferenceExpression.TypeReference == null)) {
				return SetFailure();
			}
			if(typeReferenceExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (TypeReferenceExpression)d;
			if (!IsMatch(typeReferenceExpression, data)) {
				return SetFailure();
			}
			return typeReferenceExpression.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitUnaryOperatorExpression(UnaryOperatorExpression unaryOperatorExpression, object d) {
			if ((unaryOperatorExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((unaryOperatorExpression.Expression == null)) {
				return SetFailure();
			}
			if(unaryOperatorExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (UnaryOperatorExpression)d;
			if (!IsMatch(unaryOperatorExpression, data)) {
				return SetFailure();
			}
			return unaryOperatorExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitUncheckedExpression(UncheckedExpression uncheckedExpression, object d) {
			if ((uncheckedExpression == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((uncheckedExpression.Expression == null)) {
				return SetFailure();
			}
			if(uncheckedExpression.GetType() != d.GetType()) {return SetFailure();}
			var data = (UncheckedExpression)d;
			if (!IsMatch(uncheckedExpression, data)) {
				return SetFailure();
			}
			return uncheckedExpression.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitUncheckedStatement(UncheckedStatement uncheckedStatement, object d) {
			if ((uncheckedStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((uncheckedStatement.Block == null)) {
				return SetFailure();
			}
			if(uncheckedStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (UncheckedStatement)d;
			if (!IsMatch(uncheckedStatement, data)) {
				return SetFailure();
			}
			return uncheckedStatement.Block.AcceptVisitor(this, data.Block);
		}
		
		public virtual bool VisitUnsafeStatement(UnsafeStatement unsafeStatement, object d) {
			if ((unsafeStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((unsafeStatement.Block == null)) {
				return SetFailure();
			}
			if(unsafeStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (UnsafeStatement)d;
			if (!IsMatch(unsafeStatement, data)) {
				return SetFailure();
			}
			return unsafeStatement.Block.AcceptVisitor(this, data.Block);
		}
		
		public virtual bool VisitUsing(Using @using, object d) {
			if ((@using == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((@using.Alias == null)) {
				return SetFailure();
			}
			if(@using.GetType() != d.GetType()) {return SetFailure();}
			var data = (Using)d;
			if (!IsMatch(@using, data)) {
				return SetFailure();
			}
			return @using.Alias.AcceptVisitor(this, data.Alias);
		}
		
		public virtual bool VisitUsingDeclaration(UsingDeclaration usingDeclaration, object d) {
			if ((usingDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((usingDeclaration.Usings == null)) {
				return SetFailure();
			}
			if(usingDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (UsingDeclaration)d;
			if (!IsMatch(usingDeclaration, data)) {
				return SetFailure();
			}
			if (usingDeclaration.Usings.Count == data.Usings.Count) {
			for (int i=0; i<usingDeclaration.Usings.Count;i++) {
				Using o = usingDeclaration.Usings[i];
				if(o == null){return SetFailure();}
				if((bool)o.AcceptVisitor(this, data.Usings[i]) == false) return SetFailure();
			}			}			else { return SetFailure(); }
			return true;
		}
		
		public virtual bool VisitUsingStatement(UsingStatement usingStatement, object d) {
			if ((usingStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((usingStatement.ResourceAcquisition == null)) {
				return SetFailure();
			}
			if ((usingStatement.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(usingStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (UsingStatement)d;
			if (!IsMatch(usingStatement, data)) {
				return SetFailure();
			}
			usingStatement.ResourceAcquisition.AcceptVisitor(this, data.ResourceAcquisition);
			return usingStatement.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitVariableDeclaration(VariableDeclaration variableDeclaration, object d) {
			if ((variableDeclaration == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((variableDeclaration.Initializer == null)) {
				return SetFailure();
			}
			if ((variableDeclaration.TypeReference == null)) {
				return SetFailure();
			}
			if ((variableDeclaration.FixedArrayInitialization == null)) {
				return SetFailure();
			}
			if(variableDeclaration.GetType() != d.GetType()) {return SetFailure();}
			var data = (VariableDeclaration)d;
			if (!IsMatch(variableDeclaration, data)) {
				return SetFailure();
			}
			variableDeclaration.Initializer.AcceptVisitor(this, data.Initializer);
			variableDeclaration.TypeReference.AcceptVisitor(this, data.TypeReference);
			return variableDeclaration.FixedArrayInitialization.AcceptVisitor(this, data.FixedArrayInitialization);
		}
		
		public virtual bool VisitWithStatement(WithStatement withStatement, object d) {
			if ((withStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((withStatement.Expression == null)) {
				return SetFailure();
			}
			if ((withStatement.Body == null)) {
				return SetFailure();
			}
			if(withStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (WithStatement)d;
			if (!IsMatch(withStatement, data)) {
				return SetFailure();
			}
			withStatement.Expression.AcceptVisitor(this, data.Expression);
			return withStatement.Body.AcceptVisitor(this, data.Body);
		}
		
		public virtual bool VisitYieldStatement(YieldStatement yieldStatement, object d) {
			if ((yieldStatement == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((yieldStatement.Statement == null)) {
				return SetFailure();
			}
			if(yieldStatement.GetType() != d.GetType()) {return SetFailure();}
			var data = (YieldStatement)d;
			if (!IsMatch(yieldStatement, data)) {
				return SetFailure();
			}
			return yieldStatement.Statement.AcceptVisitor(this, data.Statement);
		}
	}
}
