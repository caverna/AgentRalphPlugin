//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgentRalph.Visitors {
	using System;
	using System.Collections.Generic;
	using System.Diagnostics;
	using ICSharpCode.NRefactory.Ast;
	using ICSharpCode.NRefactory;
	
	
	public partial class AstComparisonVisitor {
		
		public virtual bool VisitAddHandlerStatement(AddHandlerStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.EventExpression == null)) {
				return SetFailure();
			}
			if ((left.HandlerExpression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (AddHandlerStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.EventExpression.AcceptVisitor(this, data.EventExpression);
			return left.HandlerExpression.AcceptVisitor(this, data.HandlerExpression);
		}
		
		public virtual bool VisitAddressOfExpression(AddressOfExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (AddressOfExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitAnonymousMethodExpression(AnonymousMethodExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.Body == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (AnonymousMethodExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.Body.AcceptVisitor(this, data.Body);
		}
		
		public virtual bool VisitArrayCreateExpression(ArrayCreateExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.CreateType == null)) {
				return SetFailure();
			}
			if ((left.Arguments == null)) {
				return SetFailure();
			}
			if ((left.ArrayInitializer == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ArrayCreateExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.CreateType.AcceptVisitor(this, data.CreateType);
			if (left.Arguments.Count == data.Arguments.Count) {
			for (int i=0; i<left.Arguments.Count;i++) {
				Expression o = left.Arguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Arguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.ArrayInitializer.AcceptVisitor(this, data.ArrayInitializer);
		}
		
		public virtual bool VisitAssignmentExpression(AssignmentExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Left == null)) {
				return SetFailure();
			}
			if ((left.Right == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (AssignmentExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Left.AcceptVisitor(this, data.Left);
			return left.Right.AcceptVisitor(this, data.Right);
		}
		
		public virtual bool VisitAttribute(ICSharpCode.NRefactory.Ast.Attribute left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.PositionalArguments == null)) {
				return SetFailure();
			}
			if ((left.NamedArguments == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ICSharpCode.NRefactory.Ast.Attribute)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.PositionalArguments.Count == data.PositionalArguments.Count) {
			for (int i=0; i<left.PositionalArguments.Count;i++) {
				Expression o = left.PositionalArguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.PositionalArguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.NamedArguments.Count == data.NamedArguments.Count) {
			for (int i=0; i<left.NamedArguments.Count;i++) {
				NamedArgumentExpression o = left.NamedArguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.NamedArguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitAttributeSection(AttributeSection left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (AttributeSection)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				ICSharpCode.NRefactory.Ast.Attribute o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitBaseReferenceExpression(BaseReferenceExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (BaseReferenceExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitBinaryOperatorExpression(BinaryOperatorExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Left == null)) {
				return SetFailure();
			}
			if ((left.Right == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (BinaryOperatorExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Left.AcceptVisitor(this, data.Left);
			return left.Right.AcceptVisitor(this, data.Right);
		}
		
		public virtual bool VisitBlockStatement(BlockStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (BlockStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.AcceptChildren(this, d);
		}
		
		public virtual bool VisitBreakStatement(BreakStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (BreakStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitCaseLabel(CaseLabel left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Label == null)) {
				return SetFailure();
			}
			if ((left.ToExpression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (CaseLabel)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Label.AcceptVisitor(this, data.Label);
			return left.ToExpression.AcceptVisitor(this, data.ToExpression);
		}
		
		public virtual bool VisitCastExpression(CastExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.CastTo == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (CastExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.CastTo.AcceptVisitor(this, data.CastTo);
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitCatchClause(CatchClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.StatementBlock == null)) {
				return SetFailure();
			}
			if ((left.Condition == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (CatchClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			left.StatementBlock.AcceptVisitor(this, data.StatementBlock);
			return left.Condition.AcceptVisitor(this, data.Condition);
		}
		
		public virtual bool VisitCheckedExpression(CheckedExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (CheckedExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitCheckedStatement(CheckedStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Block == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (CheckedStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Block.AcceptVisitor(this, data.Block);
		}
		
		public virtual bool VisitClassReferenceExpression(ClassReferenceExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ClassReferenceExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitCollectionInitializerExpression(CollectionInitializerExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.CreateExpressions == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (CollectionInitializerExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.CreateExpressions.Count == data.CreateExpressions.Count) {
			for (int i=0; i<left.CreateExpressions.Count;i++) {
				Expression o = left.CreateExpressions[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.CreateExpressions[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitCompilationUnit(CompilationUnit left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (CompilationUnit)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.AcceptChildren(this, d);
		}
		
		public virtual bool VisitConditionalExpression(ConditionalExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Condition == null)) {
				return SetFailure();
			}
			if ((left.TrueExpression == null)) {
				return SetFailure();
			}
			if ((left.FalseExpression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ConditionalExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Condition.AcceptVisitor(this, data.Condition);
			left.TrueExpression.AcceptVisitor(this, data.TrueExpression);
			return left.FalseExpression.AcceptVisitor(this, data.FalseExpression);
		}
		
		public virtual bool VisitConstructorDeclaration(ConstructorDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.ConstructorInitializer == null)) {
				return SetFailure();
			}
			if ((left.Body == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ConstructorDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.ConstructorInitializer.AcceptVisitor(this, data.ConstructorInitializer);
			return left.Body.AcceptVisitor(this, data.Body);
		}
		
		public virtual bool VisitConstructorInitializer(ConstructorInitializer left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Arguments == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ConstructorInitializer)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Arguments.Count == data.Arguments.Count) {
			for (int i=0; i<left.Arguments.Count;i++) {
				Expression o = left.Arguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Arguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitContinueStatement(ContinueStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ContinueStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitDeclareDeclaration(DeclareDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (DeclareDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitDefaultValueExpression(DefaultValueExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (DefaultValueExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitDelegateDeclaration(DelegateDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.ReturnType == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.Templates == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (DelegateDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.ReturnType.AcceptVisitor(this, data.ReturnType);
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Templates.Count == data.Templates.Count) {
			for (int i=0; i<left.Templates.Count;i++) {
				TemplateDefinition o = left.Templates[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Templates[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitDestructorDeclaration(DestructorDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Body == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (DestructorDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.Body.AcceptVisitor(this, data.Body);
		}
		
		public virtual bool VisitDirectionExpression(DirectionExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (DirectionExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitDoLoopStatement(DoLoopStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Condition == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (DoLoopStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Condition.AcceptVisitor(this, data.Condition);
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitElseIfSection(ElseIfSection left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Condition == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ElseIfSection)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Condition.AcceptVisitor(this, data.Condition);
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitEmptyStatement(EmptyStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (EmptyStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitEndStatement(EndStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (EndStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitEraseStatement(EraseStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expressions == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (EraseStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Expressions.Count == data.Expressions.Count) {
			for (int i=0; i<left.Expressions.Count;i++) {
				Expression o = left.Expressions[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Expressions[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitErrorStatement(ErrorStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ErrorStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitEventAddRegion(EventAddRegion left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Block == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (EventAddRegion)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.Block.AcceptVisitor(this, data.Block);
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitEventDeclaration(EventDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.AddRegion == null)) {
				return SetFailure();
			}
			if ((left.RemoveRegion == null)) {
				return SetFailure();
			}
			if ((left.RaiseRegion == null)) {
				return SetFailure();
			}
			if ((left.Initializer == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (EventDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<left.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = left.InterfaceImplementations[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			left.AddRegion.AcceptVisitor(this, data.AddRegion);
			left.RemoveRegion.AcceptVisitor(this, data.RemoveRegion);
			left.RaiseRegion.AcceptVisitor(this, data.RaiseRegion);
			return left.Initializer.AcceptVisitor(this, data.Initializer);
		}
		
		public virtual bool VisitEventRaiseRegion(EventRaiseRegion left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Block == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (EventRaiseRegion)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.Block.AcceptVisitor(this, data.Block);
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitEventRemoveRegion(EventRemoveRegion left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Block == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (EventRemoveRegion)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.Block.AcceptVisitor(this, data.Block);
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitExitStatement(ExitStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ExitStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitExpressionRangeVariable(ExpressionRangeVariable left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if ((left.Type == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ExpressionRangeVariable)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Expression.AcceptVisitor(this, data.Expression);
			return left.Type.AcceptVisitor(this, data.Type);
		}
		
		public virtual bool VisitExpressionStatement(ExpressionStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ExpressionStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitExternAliasDirective(ExternAliasDirective left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ExternAliasDirective)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitFieldDeclaration(FieldDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.Fields == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (FieldDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			if (left.Fields.Count == data.Fields.Count) {
			for (int i=0; i<left.Fields.Count;i++) {
				VariableDeclaration o = left.Fields[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Fields[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitFixedStatement(FixedStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.PointerDeclaration == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (FixedStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.PointerDeclaration.AcceptVisitor(this, data.PointerDeclaration);
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitForeachStatement(ForeachStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if ((left.NextExpression == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ForeachStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			left.Expression.AcceptVisitor(this, data.Expression);
			left.NextExpression.AcceptVisitor(this, data.NextExpression);
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitForNextStatement(ForNextStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Start == null)) {
				return SetFailure();
			}
			if ((left.End == null)) {
				return SetFailure();
			}
			if ((left.Step == null)) {
				return SetFailure();
			}
			if ((left.NextExpressions == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.LoopVariableExpression == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ForNextStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Start.AcceptVisitor(this, data.Start);
			left.End.AcceptVisitor(this, data.End);
			left.Step.AcceptVisitor(this, data.Step);
			if (left.NextExpressions.Count == data.NextExpressions.Count) {
			for (int i=0; i<left.NextExpressions.Count;i++) {
				Expression o = left.NextExpressions[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.NextExpressions[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			left.LoopVariableExpression.AcceptVisitor(this, data.LoopVariableExpression);
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitForStatement(ForStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Initializers == null)) {
				return SetFailure();
			}
			if ((left.Condition == null)) {
				return SetFailure();
			}
			if ((left.Iterator == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ForStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Initializers.Count == data.Initializers.Count) {
			for (int i=0; i<left.Initializers.Count;i++) {
				Statement o = left.Initializers[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Initializers[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.Condition.AcceptVisitor(this, data.Condition);
			if (left.Iterator.Count == data.Iterator.Count) {
			for (int i=0; i<left.Iterator.Count;i++) {
				Statement o = left.Iterator[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Iterator[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitGotoCaseStatement(GotoCaseStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (GotoCaseStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitGotoStatement(GotoStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (GotoStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitIdentifierExpression(IdentifierExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeArguments == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (IdentifierExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.TypeArguments.Count == data.TypeArguments.Count) {
			for (int i=0; i<left.TypeArguments.Count;i++) {
				TypeReference o = left.TypeArguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.TypeArguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitIfElseStatement(IfElseStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Condition == null)) {
				return SetFailure();
			}
			if ((left.TrueStatement == null)) {
				return SetFailure();
			}
			if ((left.FalseStatement == null)) {
				return SetFailure();
			}
			if ((left.ElseIfSections == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (IfElseStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Condition.AcceptVisitor(this, data.Condition);
			if (left.TrueStatement.Count == data.TrueStatement.Count) {
			for (int i=0; i<left.TrueStatement.Count;i++) {
				Statement o = left.TrueStatement[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.TrueStatement[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.FalseStatement.Count == data.FalseStatement.Count) {
			for (int i=0; i<left.FalseStatement.Count;i++) {
				Statement o = left.FalseStatement[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.FalseStatement[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.ElseIfSections.Count == data.ElseIfSections.Count) {
			for (int i=0; i<left.ElseIfSections.Count;i++) {
				ElseIfSection o = left.ElseIfSections[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.ElseIfSections[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitIndexerDeclaration(IndexerDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.GetRegion == null)) {
				return SetFailure();
			}
			if ((left.SetRegion == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (IndexerDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<left.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = left.InterfaceImplementations[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			left.GetRegion.AcceptVisitor(this, data.GetRegion);
			return left.SetRegion.AcceptVisitor(this, data.SetRegion);
		}
		
		public virtual bool VisitIndexerExpression(IndexerExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TargetObject == null)) {
				return SetFailure();
			}
			if ((left.Indexes == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (IndexerExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.TargetObject.AcceptVisitor(this, data.TargetObject);
			if (left.Indexes.Count == data.Indexes.Count) {
			for (int i=0; i<left.Indexes.Count;i++) {
				Expression o = left.Indexes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Indexes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitInnerClassTypeReference(InnerClassTypeReference left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.GenericTypes == null)) {
				return SetFailure();
			}
			if ((left.BaseType == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (InnerClassTypeReference)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.GenericTypes.Count == data.GenericTypes.Count) {
			for (int i=0; i<left.GenericTypes.Count;i++) {
				TypeReference o = left.GenericTypes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.GenericTypes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.BaseType.AcceptVisitor(this, data.BaseType);
		}
		
		public virtual bool VisitInterfaceImplementation(InterfaceImplementation left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.InterfaceType == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (InterfaceImplementation)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.InterfaceType.AcceptVisitor(this, data.InterfaceType);
		}
		
		public virtual bool VisitInvocationExpression(InvocationExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TargetObject == null)) {
				return SetFailure();
			}
			if ((left.Arguments == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (InvocationExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.TargetObject.AcceptVisitor(this, data.TargetObject);
			if (left.Arguments.Count == data.Arguments.Count) {
			for (int i=0; i<left.Arguments.Count;i++) {
				Expression o = left.Arguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Arguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitLabelStatement(LabelStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (LabelStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitLambdaExpression(LambdaExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.StatementBody == null)) {
				return SetFailure();
			}
			if ((left.ExpressionBody == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (LambdaExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.StatementBody.AcceptVisitor(this, data.StatementBody);
			return left.ExpressionBody.AcceptVisitor(this, data.ExpressionBody);
		}
		
		public virtual bool VisitLocalVariableDeclaration(LocalVariableDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.Variables == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (LocalVariableDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			if (left.Variables.Count == data.Variables.Count) {
			for (int i=0; i<left.Variables.Count;i++) {
				VariableDeclaration o = left.Variables[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Variables[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitLockStatement(LockStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.LockExpression == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (LockStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.LockExpression.AcceptVisitor(this, data.LockExpression);
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitMemberReferenceExpression(MemberReferenceExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TargetObject == null)) {
				return SetFailure();
			}
			if ((left.TypeArguments == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (MemberReferenceExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.TargetObject.AcceptVisitor(this, data.TargetObject);
			if (left.TypeArguments.Count == data.TypeArguments.Count) {
			for (int i=0; i<left.TypeArguments.Count;i++) {
				TypeReference o = left.TypeArguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.TypeArguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitMethodDeclaration(MethodDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.Body == null)) {
				return SetFailure();
			}
			if ((left.Templates == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (MethodDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<left.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = left.InterfaceImplementations[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			left.Body.AcceptVisitor(this, data.Body);
			if (left.Templates.Count == data.Templates.Count) {
			for (int i=0; i<left.Templates.Count;i++) {
				TemplateDefinition o = left.Templates[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Templates[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitNamedArgumentExpression(NamedArgumentExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (NamedArgumentExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitNamespaceDeclaration(NamespaceDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (NamespaceDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.AcceptChildren(this, d);
		}
		
		public virtual bool VisitObjectCreateExpression(ObjectCreateExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.CreateType == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.ObjectInitializer == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ObjectCreateExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.CreateType.AcceptVisitor(this, data.CreateType);
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				Expression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.ObjectInitializer.AcceptVisitor(this, data.ObjectInitializer);
		}
		
		public virtual bool VisitOnErrorStatement(OnErrorStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (OnErrorStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitOperatorDeclaration(OperatorDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.Body == null)) {
				return SetFailure();
			}
			if ((left.Templates == null)) {
				return SetFailure();
			}
			if ((left.ReturnTypeAttributes == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (OperatorDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<left.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = left.InterfaceImplementations[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			left.Body.AcceptVisitor(this, data.Body);
			if (left.Templates.Count == data.Templates.Count) {
			for (int i=0; i<left.Templates.Count;i++) {
				TemplateDefinition o = left.Templates[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Templates[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.ReturnTypeAttributes.Count == data.ReturnTypeAttributes.Count) {
			for (int i=0; i<left.ReturnTypeAttributes.Count;i++) {
				AttributeSection o = left.ReturnTypeAttributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.ReturnTypeAttributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitOptionDeclaration(OptionDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (OptionDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitParameterDeclarationExpression(ParameterDeclarationExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.DefaultValue == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ParameterDeclarationExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			return left.DefaultValue.AcceptVisitor(this, data.DefaultValue);
		}
		
		public virtual bool VisitParenthesizedExpression(ParenthesizedExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ParenthesizedExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitPointerReferenceExpression(PointerReferenceExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TargetObject == null)) {
				return SetFailure();
			}
			if ((left.TypeArguments == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (PointerReferenceExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.TargetObject.AcceptVisitor(this, data.TargetObject);
			if (left.TypeArguments.Count == data.TypeArguments.Count) {
			for (int i=0; i<left.TypeArguments.Count;i++) {
				TypeReference o = left.TypeArguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.TypeArguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitPrimitiveExpression(PrimitiveExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (PrimitiveExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitPropertyDeclaration(PropertyDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if ((left.InterfaceImplementations == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.GetRegion == null)) {
				return SetFailure();
			}
			if ((left.SetRegion == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (PropertyDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.InterfaceImplementations.Count == data.InterfaceImplementations.Count) {
			for (int i=0; i<left.InterfaceImplementations.Count;i++) {
				InterfaceImplementation o = left.InterfaceImplementations[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.InterfaceImplementations[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			left.GetRegion.AcceptVisitor(this, data.GetRegion);
			return left.SetRegion.AcceptVisitor(this, data.SetRegion);
		}
		
		public virtual bool VisitPropertyGetRegion(PropertyGetRegion left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Block == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (PropertyGetRegion)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.Block.AcceptVisitor(this, data.Block);
		}
		
		public virtual bool VisitPropertySetRegion(PropertySetRegion left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Block == null)) {
				return SetFailure();
			}
			if ((left.Parameters == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (PropertySetRegion)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			left.Block.AcceptVisitor(this, data.Block);
			if (left.Parameters.Count == data.Parameters.Count) {
			for (int i=0; i<left.Parameters.Count;i++) {
				ParameterDeclarationExpression o = left.Parameters[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Parameters[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitQueryExpression(QueryExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.FromClause == null)) {
				return SetFailure();
			}
			if ((left.MiddleClauses == null)) {
				return SetFailure();
			}
			if ((left.SelectOrGroupClause == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.FromClause.AcceptVisitor(this, data.FromClause);
			if (left.MiddleClauses.Count == data.MiddleClauses.Count) {
			for (int i=0; i<left.MiddleClauses.Count;i++) {
				QueryExpressionClause o = left.MiddleClauses[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.MiddleClauses[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.SelectOrGroupClause.AcceptVisitor(this, data.SelectOrGroupClause);
		}
		
		public virtual bool VisitQueryExpressionAggregateClause(QueryExpressionAggregateClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.FromClause == null)) {
				return SetFailure();
			}
			if ((left.MiddleClauses == null)) {
				return SetFailure();
			}
			if ((left.IntoVariables == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionAggregateClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.FromClause.AcceptVisitor(this, data.FromClause);
			if (left.MiddleClauses.Count == data.MiddleClauses.Count) {
			for (int i=0; i<left.MiddleClauses.Count;i++) {
				QueryExpressionClause o = left.MiddleClauses[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.MiddleClauses[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.IntoVariables.Count == data.IntoVariables.Count) {
			for (int i=0; i<left.IntoVariables.Count;i++) {
				ExpressionRangeVariable o = left.IntoVariables[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.IntoVariables[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionDistinctClause(QueryExpressionDistinctClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionDistinctClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitQueryExpressionFromClause(QueryExpressionFromClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Type == null)) {
				return SetFailure();
			}
			if ((left.InExpression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionFromClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Type.AcceptVisitor(this, data.Type);
			return left.InExpression.AcceptVisitor(this, data.InExpression);
		}
		
		public virtual bool VisitQueryExpressionGroupClause(QueryExpressionGroupClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Projection == null)) {
				return SetFailure();
			}
			if ((left.GroupBy == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionGroupClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Projection.AcceptVisitor(this, data.Projection);
			return left.GroupBy.AcceptVisitor(this, data.GroupBy);
		}
		
		public virtual bool VisitQueryExpressionGroupJoinVBClause(QueryExpressionGroupJoinVBClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.JoinClause == null)) {
				return SetFailure();
			}
			if ((left.IntoVariables == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionGroupJoinVBClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.JoinClause.AcceptVisitor(this, data.JoinClause);
			if (left.IntoVariables.Count == data.IntoVariables.Count) {
			for (int i=0; i<left.IntoVariables.Count;i++) {
				ExpressionRangeVariable o = left.IntoVariables[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.IntoVariables[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionGroupVBClause(QueryExpressionGroupVBClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.GroupVariables == null)) {
				return SetFailure();
			}
			if ((left.ByVariables == null)) {
				return SetFailure();
			}
			if ((left.IntoVariables == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionGroupVBClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.GroupVariables.Count == data.GroupVariables.Count) {
			for (int i=0; i<left.GroupVariables.Count;i++) {
				ExpressionRangeVariable o = left.GroupVariables[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.GroupVariables[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.ByVariables.Count == data.ByVariables.Count) {
			for (int i=0; i<left.ByVariables.Count;i++) {
				ExpressionRangeVariable o = left.ByVariables[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.ByVariables[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.IntoVariables.Count == data.IntoVariables.Count) {
			for (int i=0; i<left.IntoVariables.Count;i++) {
				ExpressionRangeVariable o = left.IntoVariables[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.IntoVariables[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionJoinClause(QueryExpressionJoinClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Type == null)) {
				return SetFailure();
			}
			if ((left.InExpression == null)) {
				return SetFailure();
			}
			if ((left.OnExpression == null)) {
				return SetFailure();
			}
			if ((left.EqualsExpression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionJoinClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Type.AcceptVisitor(this, data.Type);
			left.InExpression.AcceptVisitor(this, data.InExpression);
			left.OnExpression.AcceptVisitor(this, data.OnExpression);
			return left.EqualsExpression.AcceptVisitor(this, data.EqualsExpression);
		}
		
		public virtual bool VisitQueryExpressionJoinConditionVB(QueryExpressionJoinConditionVB left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.LeftSide == null)) {
				return SetFailure();
			}
			if ((left.RightSide == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionJoinConditionVB)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.LeftSide.AcceptVisitor(this, data.LeftSide);
			return left.RightSide.AcceptVisitor(this, data.RightSide);
		}
		
		public virtual bool VisitQueryExpressionJoinVBClause(QueryExpressionJoinVBClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.JoinVariable == null)) {
				return SetFailure();
			}
			if ((left.SubJoin == null)) {
				return SetFailure();
			}
			if ((left.Conditions == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionJoinVBClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.JoinVariable.AcceptVisitor(this, data.JoinVariable);
			left.SubJoin.AcceptVisitor(this, data.SubJoin);
			if (left.Conditions.Count == data.Conditions.Count) {
			for (int i=0; i<left.Conditions.Count;i++) {
				QueryExpressionJoinConditionVB o = left.Conditions[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Conditions[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionLetClause(QueryExpressionLetClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionLetClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitQueryExpressionLetVBClause(QueryExpressionLetVBClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Variables == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionLetVBClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Variables.Count == data.Variables.Count) {
			for (int i=0; i<left.Variables.Count;i++) {
				ExpressionRangeVariable o = left.Variables[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Variables[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionOrderClause(QueryExpressionOrderClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Orderings == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionOrderClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Orderings.Count == data.Orderings.Count) {
			for (int i=0; i<left.Orderings.Count;i++) {
				QueryExpressionOrdering o = left.Orderings[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Orderings[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionOrdering(QueryExpressionOrdering left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Criteria == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionOrdering)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Criteria.AcceptVisitor(this, data.Criteria);
		}
		
		public virtual bool VisitQueryExpressionPartitionVBClause(QueryExpressionPartitionVBClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionPartitionVBClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitQueryExpressionSelectClause(QueryExpressionSelectClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Projection == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionSelectClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Projection.AcceptVisitor(this, data.Projection);
		}
		
		public virtual bool VisitQueryExpressionSelectVBClause(QueryExpressionSelectVBClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Variables == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionSelectVBClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Variables.Count == data.Variables.Count) {
			for (int i=0; i<left.Variables.Count;i++) {
				ExpressionRangeVariable o = left.Variables[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Variables[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitQueryExpressionWhereClause(QueryExpressionWhereClause left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Condition == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (QueryExpressionWhereClause)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Condition.AcceptVisitor(this, data.Condition);
		}
		
		public virtual bool VisitRaiseEventStatement(RaiseEventStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Arguments == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (RaiseEventStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Arguments.Count == data.Arguments.Count) {
			for (int i=0; i<left.Arguments.Count;i++) {
				Expression o = left.Arguments[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Arguments[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitReDimStatement(ReDimStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.ReDimClauses == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ReDimStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.ReDimClauses.Count == data.ReDimClauses.Count) {
			for (int i=0; i<left.ReDimClauses.Count;i++) {
				InvocationExpression o = left.ReDimClauses[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.ReDimClauses[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitRemoveHandlerStatement(RemoveHandlerStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.EventExpression == null)) {
				return SetFailure();
			}
			if ((left.HandlerExpression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (RemoveHandlerStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.EventExpression.AcceptVisitor(this, data.EventExpression);
			return left.HandlerExpression.AcceptVisitor(this, data.HandlerExpression);
		}
		
		public virtual bool VisitResumeStatement(ResumeStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ResumeStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitReturnStatement(ReturnStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ReturnStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitSizeOfExpression(SizeOfExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (SizeOfExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitStackAllocExpression(StackAllocExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (StackAllocExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitStopStatement(StopStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (StopStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitSwitchSection(SwitchSection left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.SwitchLabels == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (SwitchSection)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.SwitchLabels.Count == data.SwitchLabels.Count) {
			for (int i=0; i<left.SwitchLabels.Count;i++) {
				CaseLabel o = left.SwitchLabels[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.SwitchLabels[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.AcceptChildren(this, d);
		}
		
		public virtual bool VisitSwitchStatement(SwitchStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.SwitchExpression == null)) {
				return SetFailure();
			}
			if ((left.SwitchSections == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (SwitchStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.SwitchExpression.AcceptVisitor(this, data.SwitchExpression);
			if (left.SwitchSections.Count == data.SwitchSections.Count) {
			for (int i=0; i<left.SwitchSections.Count;i++) {
				SwitchSection o = left.SwitchSections[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.SwitchSections[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitTemplateDefinition(TemplateDefinition left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.Bases == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (TemplateDefinition)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Bases.Count == data.Bases.Count) {
			for (int i=0; i<left.Bases.Count;i++) {
				TypeReference o = left.Bases[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Bases[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitThisReferenceExpression(ThisReferenceExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ThisReferenceExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return true;
		}
		
		public virtual bool VisitThrowStatement(ThrowStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (ThrowStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitTryCatchStatement(TryCatchStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.StatementBlock == null)) {
				return SetFailure();
			}
			if ((left.CatchClauses == null)) {
				return SetFailure();
			}
			if ((left.FinallyBlock == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (TryCatchStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.StatementBlock.AcceptVisitor(this, data.StatementBlock);
			if (left.CatchClauses.Count == data.CatchClauses.Count) {
			for (int i=0; i<left.CatchClauses.Count;i++) {
				CatchClause o = left.CatchClauses[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.CatchClauses[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.FinallyBlock.AcceptVisitor(this, data.FinallyBlock);
		}
		
		public virtual bool VisitTypeDeclaration(TypeDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Attributes == null)) {
				return SetFailure();
			}
			if ((left.BaseTypes == null)) {
				return SetFailure();
			}
			if ((left.Templates == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (TypeDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Attributes.Count == data.Attributes.Count) {
			for (int i=0; i<left.Attributes.Count;i++) {
				AttributeSection o = left.Attributes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Attributes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.BaseTypes.Count == data.BaseTypes.Count) {
			for (int i=0; i<left.BaseTypes.Count;i++) {
				TypeReference o = left.BaseTypes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.BaseTypes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			if (left.Templates.Count == data.Templates.Count) {
			for (int i=0; i<left.Templates.Count;i++) {
				TemplateDefinition o = left.Templates[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Templates[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return left.AcceptChildren(this, d);
		}
		
		public virtual bool VisitTypeOfExpression(TypeOfExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (TypeOfExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitTypeOfIsExpression(TypeOfIsExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (TypeOfIsExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Expression.AcceptVisitor(this, data.Expression);
			return left.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitTypeReference(TypeReference left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.GenericTypes == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (TypeReference)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.GenericTypes.Count == data.GenericTypes.Count) {
			for (int i=0; i<left.GenericTypes.Count;i++) {
				TypeReference o = left.GenericTypes[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.GenericTypes[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitTypeReferenceExpression(TypeReferenceExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (TypeReferenceExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.TypeReference.AcceptVisitor(this, data.TypeReference);
		}
		
		public virtual bool VisitUnaryOperatorExpression(UnaryOperatorExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (UnaryOperatorExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitUncheckedExpression(UncheckedExpression left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (UncheckedExpression)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Expression.AcceptVisitor(this, data.Expression);
		}
		
		public virtual bool VisitUncheckedStatement(UncheckedStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Block == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (UncheckedStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Block.AcceptVisitor(this, data.Block);
		}
		
		public virtual bool VisitUnsafeStatement(UnsafeStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Block == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (UnsafeStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Block.AcceptVisitor(this, data.Block);
		}
		
		public virtual bool VisitUsing(Using left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Alias == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (Using)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Alias.AcceptVisitor(this, data.Alias);
		}
		
		public virtual bool VisitUsingDeclaration(UsingDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Usings == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (UsingDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			if (left.Usings.Count == data.Usings.Count) {
			for (int i=0; i<left.Usings.Count;i++) {
				Using o = left.Usings[i];
				if(o == null){return SetFailure(left, d);}
				if((bool)o.AcceptVisitor(this, data.Usings[i]) == false) return SetFailure(left, d);
			}			}			else { return SetFailure(left, d); }
			return true;
		}
		
		public virtual bool VisitUsingStatement(UsingStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.ResourceAcquisition == null)) {
				return SetFailure();
			}
			if ((left.EmbeddedStatement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (UsingStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.ResourceAcquisition.AcceptVisitor(this, data.ResourceAcquisition);
			return left.EmbeddedStatement.AcceptVisitor(this, data.EmbeddedStatement);
		}
		
		public virtual bool VisitVariableDeclaration(VariableDeclaration left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Initializer == null)) {
				return SetFailure();
			}
			if ((left.TypeReference == null)) {
				return SetFailure();
			}
			if ((left.FixedArrayInitialization == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (VariableDeclaration)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Initializer.AcceptVisitor(this, data.Initializer);
			left.TypeReference.AcceptVisitor(this, data.TypeReference);
			return left.FixedArrayInitialization.AcceptVisitor(this, data.FixedArrayInitialization);
		}
		
		public virtual bool VisitWithStatement(WithStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Expression == null)) {
				return SetFailure();
			}
			if ((left.Body == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (WithStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			left.Expression.AcceptVisitor(this, data.Expression);
			return left.Body.AcceptVisitor(this, data.Body);
		}
		
		public virtual bool VisitYieldStatement(YieldStatement left, object d) {
			if ((left == null)) {
				return SetFailure();
			}
			if ((d == null)) {
				return SetFailure();
			}
			if ((left.Statement == null)) {
				return SetFailure();
			}
			if(left.GetType() != d.GetType()) {return SetFailure(left,d);}
			var data = (YieldStatement)d;
			if (!IsMatch(left, data)) {
				return SetFailure(left, d);
			}
			return left.Statement.AcceptVisitor(this, data.Statement);
		}
	}
}
